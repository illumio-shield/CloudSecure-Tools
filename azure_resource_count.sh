#!/usr/bin/env bash

set -euo pipefail

# Trap Ctrl+C (SIGINT) and clean up
trap_ctrlc() {
  kill 0
  exit 130
}
trap trap_ctrlc SIGINT SIGTERM

SCRIPT_NAME="Azure Resource Counter for Illumio"

# ------------------------
# Configuration
# ------------------------
VERBOSE=false
SCOPE=""
CONCURRENCY=5
CHILD_CONCURRENCY=7

# ------------------------
# Resource Mapping Configuration
# ------------------------
RESOURCE_MAPPING_URL="https://cloudsecure-onboarding-templates.s3.us-west-2.amazonaws.com/cloudsecure/resources.json"
RESOURCE_MAPPING_JSON=""
MAPPING_VERSION=""
MAPPING_DATE=""
USING_FALLBACK=false

FALLBACK_RESOURCE_MAPPING_BASE64=""

# ------------------------
# Color codes for output
# ------------------------
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[36m'
WHITE='\033[37m'
BOLD='\033[1m'
RESET='\033[0m'

# ------------------------
# Output Functions
# ------------------------
log() {
  if $VERBOSE; then
    echo -e "${WHITE}[LOG] $1${RESET}" >&2
  fi
}

log_api_call() {
  if $VERBOSE; then
    echo -e "${WHITE}[API CALL] $1${RESET}" >&2
  fi
}

log_failure() {
  if $VERBOSE; then
    echo -e "${RED}[API FAILURE] $1${RESET}" >&2
  fi
}

error_exit() {
  echo -e "${RED}✗ Error: $1${RESET}" >&2
  echo -e "${YELLOW}  Tip: $2${RESET}" >&2 2>/dev/null || true
  exit 1
}

warn() {
  echo -e "${YELLOW}⚠ Warning: $1${RESET}" >&2
}

info() {
  echo -e "${BLUE}ℹ $1${RESET}" >&2
}

success() {
  echo -e "${GREEN}✓ $1${RESET}" >&2
}

progress() {
  echo -e "${WHITE}⏳ $1${RESET}" >&2
}

# ------------------------
# Resource Mapping Functions
# ------------------------
decode_fallback_mapping() {
  if [[ -z "$FALLBACK_RESOURCE_MAPPING_BASE64" ]]; then
    error_exit "No embedded fallback resource mapping found" \
      "Please ensure the FALLBACK_RESOURCE_MAPPING_BASE64 variable is populated"
  fi
  echo "$FALLBACK_RESOURCE_MAPPING_BASE64" | base64 -d || {
    error_exit "Failed to decode embedded resource mappings" \
      "The embedded fallback may be corrupted"
  }
}

fetch_remote_mapping() {
  local temp_file=$(mktemp)
  local error_file=$(mktemp)
  local success=false
  
  # Try to fetch with curl (primary method)
  if command -v curl >/dev/null 2>&1; then
    log "Fetching resource mappings via curl..."
    if curl -sS --connect-timeout 5 --max-time 10 \
         "$RESOURCE_MAPPING_URL" \
         -o "$temp_file" 2>"$error_file"; then
      if [[ -s "$temp_file" ]] && jq -e '.clouds' "$temp_file" >/dev/null 2>&1; then
        cat "$temp_file"
        success=true
      else
        log "Downloaded file is invalid or empty"
      fi
    else
      log "Curl failed: $(cat "$error_file")"
    fi
  # Fallback to wget if curl not available
  elif command -v wget >/dev/null 2>&1; then
    log "Fetching resource mappings via wget..."
    if wget -q --timeout=10 -O "$temp_file" \
         "$RESOURCE_MAPPING_URL" 2>"$error_file"; then
      if [[ -s "$temp_file" ]] && jq -e '.clouds' "$temp_file" >/dev/null 2>&1; then
        cat "$temp_file"
        success=true
      else
        log "Downloaded file is invalid or empty"
      fi
    else
      log "Wget failed: $(cat "$error_file")"
    fi
  else
    log "Neither curl nor wget available for fetching remote mappings"
  fi
  
  rm -f "$temp_file" "$error_file"
  
  if $success; then
    return 0
  else
    return 1
  fi
}

load_resource_mapping() {
  local temp_mapping_file=$(mktemp)
  
  # Try to fetch remote mapping
  log "Attempting to fetch latest resource mappings from remote source..."
  if fetch_remote_mapping > "$temp_mapping_file" 2>/dev/null; then
    RESOURCE_MAPPING_JSON="$temp_mapping_file"
    USING_FALLBACK=false
    log "Successfully fetched latest resource mappings"
  else
    # Use fallback
    log "Remote mappings unavailable, using embedded fallback"
    if [[ -z "$FALLBACK_RESOURCE_MAPPING_BASE64" ]]; then
      error_exit "No resource mappings available" \
        "Remote mappings are unavailable and no fallback is configured"
    fi
    decode_fallback_mapping > "$temp_mapping_file"
    RESOURCE_MAPPING_JSON="$temp_mapping_file"
    USING_FALLBACK=true
    
    if ! $VERBOSE; then
      warn "Using fallback resource mappings (remote source unavailable)"
    fi
  fi
  
  # Validate JSON structure
  if ! jq -e '.clouds.azure' "$RESOURCE_MAPPING_JSON" >/dev/null 2>&1; then
    error_exit "Invalid JSON structure in resource mappings" \
      "The resource mapping file is corrupted or has an unexpected format"
  fi
  
  # Extract version and date
  MAPPING_VERSION=$(jq -r '.version // "unknown"' "$RESOURCE_MAPPING_JSON" 2>/dev/null)
  MAPPING_DATE=$(jq -r '.updatedDate // "unknown"' "$RESOURCE_MAPPING_JSON" 2>/dev/null)
  
  # Display mapping info
  local mapping_source=$($USING_FALLBACK && echo "embedded" || echo "latest")
  info "Resource mappings loaded (${mapping_source} - v${MAPPING_VERSION}, updated: ${MAPPING_DATE})"
}

cleanup_mapping() {
  if [[ -n "$RESOURCE_MAPPING_JSON" && -f "$RESOURCE_MAPPING_JSON" ]]; then
    rm -f "$RESOURCE_MAPPING_JSON"
  fi
}

CONTAINER_HOST_TYPES=()
CONTAINER_HOST_TAG_NAMES=()
CHILD_RESOURCE_TYPES=()
PARENT_RESOURCE_TYPES=()

build_container_host_tags() {
  # Only build container host tags for child resources now
  local tags_data=$(jq -r '.clouds.azure[] | select(.container_host_tag != null and .is_child == true) | .script_resource_name + "|" + .container_host_tag' "$RESOURCE_MAPPING_JSON")
  while IFS='|' read -r resource_type tag_names; do
    if [[ -n "$resource_type" && -n "$tag_names" ]]; then
      CONTAINER_HOST_TYPES+=("$resource_type")
      CONTAINER_HOST_TAG_NAMES+=("$tag_names")
    fi
  done <<< "$tags_data"
} 

# Helper function to get container tag for a resource type
get_container_tag() {
  local resource_type="$1"
  local i
  for i in "${!CONTAINER_HOST_TYPES[@]}"; do
    if [[ "${CONTAINER_HOST_TYPES[$i]}" == "$resource_type" ]]; then
      echo "${CONTAINER_HOST_TAG_NAMES[$i]}"
      return 0
    fi
  done
  echo ""
  return 1
}

# Helper function to check if a resource type is a child
is_child_resource() {
  local resource_type="$1"
  for child_type in "${CHILD_RESOURCE_TYPES[@]}"; do
    if [[ "$resource_type" == "$child_type" ]]; then
      return 0
    fi
  done
  return 1
}

# Function to count a single child resource for a specific parent
# Returns: "child_type:total_count:container_count" format
count_single_child_resource() {
  local subscription="$1"
  local parent_type="$2"
  local child_type="$3"
  local parent_id="$4"
  local temp_file="$5"
  
  local error_output=$(mktemp)
  local child_count=0
  local container_count=0  # Track container hosts separately
  
  # Extract resource group and parent name from resource ID
  local rg=$(echo "$parent_id" | sed -n 's|.*/resourceGroups/\([^/]*\)/.*|\1|p')
  local parent_name=$(basename "$parent_id")
  
  log "Checking parent resource: $parent_name in RG: $rg"
  
  # Check if this child type has container host tags to check
  local container_tags=$(get_container_tag "$child_type")
  local should_check_tags=false
  if [[ -n "$container_tags" ]]; then
    should_check_tags=true
    log "Child type $child_type has container tags to check: $container_tags"
  fi
  
  # Use specific handlers for different child resource types
  case "$child_type" in
    # Special handling for VMSS VMs with tag checking
    "Microsoft.Compute/virtualMachineScaleSets/virtualMachines")
      if $should_check_tags; then
        # Get detailed VM instances with tags
        local vms_json=$(az vmss list-instances \
          --name "$parent_name" \
          --resource-group "$rg" \
          --subscription "$subscription" \
          --query '[].{id:id, tags:tags}' \
          -o json 2>"$error_output" || echo "[]")
        
        if [[ "$vms_json" != "[]" && -n "$vms_json" ]]; then
          local num_vms=$(echo "$vms_json" | jq '. | length')
          child_count=$num_vms
          
          # Check each VM for container tags
          IFS=',' read -ra tag_array <<< "$container_tags"
          for ((i=0; i<$num_vms; i++)); do
            local vm_tags=$(echo "$vms_json" | jq -r ".[$i].tags // {}")
            local is_container=false
            
            if [[ "$vm_tags" != "null" && "$vm_tags" != "{}" ]]; then
              for tag_to_check in "${tag_array[@]}"; do
                tag_to_check=$(echo "$tag_to_check" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                local tag_value=$(echo "$vm_tags" | jq -r --arg key "$tag_to_check" '.[$key] // "not_found"')
                
                if [[ "$tag_value" != "not_found" && "$tag_value" != "null" ]]; then
                  is_container=true
                  log "VMSS VM has container tag $tag_to_check with value: $tag_value"
                  break
                fi
              done
            fi
            
            if $is_container; then
              container_count=$((container_count + 1))
            fi
          done
          
          log "VMSS VMs: Total=$child_count, Container=$container_count, Regular=$((child_count - container_count))"
        fi
      else
        # Standard count without tag checking
        child_count=$(az vmss list-instances \
          --name "$parent_name" \
          --resource-group "$rg" \
          --subscription "$subscription" \
          --query 'length(@)' \
          -o tsv 2>"$error_output" || echo "0")
      fi
      ;;
      
    # App Configuration
    "Microsoft.AppConfiguration/configurationStores/replicas")
      child_count=$(az rest --method GET --url "${parent_id}/replicas?api-version=2023-03-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # Batch Account resources
    "Microsoft.Batch/batchAccounts/applications")
      child_count=$(az batch application list --account-name "$parent_name" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Batch/batchAccounts/applications/versions")
      # Get all applications first, then count versions for each
      local apps=$(az batch application list --account-name "$parent_name" --query '[].id' -o tsv 2>"$error_output" || echo "")
      local version_count=0
      while IFS= read -r app_id; do
        if [[ -n "$app_id" ]]; then
          local app_name=$(basename "$app_id")
          local versions=$(az batch application package list --application-id "$app_name" --account-name "$parent_name" --query 'length(@)' -o tsv 2>/dev/null || echo "0")
          version_count=$((version_count + versions))
        fi
      done <<< "$apps"
      child_count=$version_count
      ;;
    "Microsoft.Batch/batchAccounts/certificates")
      child_count=$(az batch certificate list --account-name "$parent_name" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Batch/batchAccounts/pools")
      child_count=$(az batch pool list --account-name "$parent_name" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Batch/batchAccounts/privateEndpointConnections")
      child_count=$(az rest --method GET --url "${parent_id}/privateEndpointConnections?api-version=2024-07-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Batch/batchAccounts/privateLinkResources")
      child_count=$(az rest --method GET --url "${parent_id}/privateLinkResources?api-version=2024-07-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # Container Service (AKS)
    "Microsoft.ContainerService/managedClusters/agentPools")
      child_count=$(az aks nodepool list --cluster-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.ContainerService/managedClusters/agentPools/machines")
      # Get all node pools first, then count machines in each
      local pools=$(az aks nodepool list --cluster-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query '[].name' -o tsv 2>"$error_output" || echo "")
      local machine_count=0
      while IFS= read -r pool_name; do
        if [[ -n "$pool_name" ]]; then
          local machines=$(az aks nodepool show --cluster-name "$parent_name" --name "$pool_name" --resource-group "$rg" --subscription "$subscription" --query 'count' -o tsv 2>/dev/null || echo "0")
          machine_count=$((machine_count + machines))
        fi
      done <<< "$pools"
      child_count=$machine_count
      ;;
    "Microsoft.ContainerService/managedClusters/privateEndpointConnections")
      # Check if cluster supports private endpoints first
      local cluster_info=$(az aks show --name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query '{enablePrivateCluster:apiServerAccessProfile.enablePrivateCluster}' -o json 2>/dev/null || echo '{"enablePrivateCluster":false}')
      local is_private=$(echo "$cluster_info" | jq -r '.enablePrivateCluster // false')
      
      if [[ "$is_private" == "true" ]]; then
        child_count=$(az rest --method GET --url "${parent_id}/privateEndpointConnections?api-version=2024-02-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      else
        child_count=0
      fi
      ;;
      
    # PostgreSQL Database resources
    "Microsoft.DBforPostgreSQL/flexibleServers/databases")
      child_count=$(az postgres flexible-server db list --server-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.DBforPostgreSQL/serverGroupsv2/servers")
      child_count=$(az rest --method GET --url "${parent_id}/servers?api-version=2020-10-05-preview" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.DBforPostgreSQL/servers/databases")
      child_count=$(az postgres db list --server-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # Cosmos DB resources
    "Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces")
      child_count=$(az cosmosdb cassandra keyspace list --account-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases")
      child_count=$(az cosmosdb gremlin database list --account-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases")
      child_count=$(az cosmosdb mongodb database list --account-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.DocumentDB/databaseAccounts/sqlDatabases")
      child_count=$(az cosmosdb sql database list --account-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.DocumentDB/databaseAccounts/tables")
      child_count=$(az cosmosdb table list --account-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # Network resources
    "Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups")
      child_count=$(az rest --method GET --url "${parent_id}/ruleCollectionGroups?api-version=2024-01-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Network/networkInterfaces/ipConfigurations")
      child_count=$(az rest --method GET --url "${parent_id}?api-version=2024-01-01" --subscription "$subscription" --query 'properties.ipConfigurations | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Network/networkWatchers/FlowLogs")
      local nw_name=$(basename "$parent_id")
      local location=$(az resource show --ids "$parent_id" --query location -o tsv 2>/dev/null || echo "eastus")
      
      # Get all flow logs in the location, then filter by NetworkWatcher
      local all_flow_logs=$(az network watcher flow-log list --location "$location" --subscription "$subscription" --query '[].id' -o tsv 2>"$error_output" || echo "")
      
      child_count=0
      while IFS= read -r flow_log_id; do
        if [[ -n "$flow_log_id" && "$flow_log_id" == *"/networkWatchers/$nw_name/"* ]]; then
          child_count=$((child_count + 1))
        fi
      done <<< "$all_flow_logs"
      ;;
    "Microsoft.Network/virtualHubs/bgpConnections")
      child_count=$(az rest --method GET --url "${parent_id}/bgpConnections?api-version=2024-01-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections")
      child_count=$(az network vhub connection list --vhub-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Network/virtualHubs/ipConfigurations")
      child_count=$(az rest --method GET --url "${parent_id}/ipConfigurations?api-version=2024-01-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Network/virtualNetworks/subnets")
      child_count=$(az network vnet subnet list --vnet-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Network/virtualNetworks/virtualNetworkPeerings")
      child_count=$(az network vnet peering list --vnet-name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # SQL resources
    "Microsoft.Sql/servers/databases")
      child_count=$(az sql db list --server "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
    "Microsoft.Sql/managedInstances/privateEndpointConnections")
      child_count=$(az rest --method GET --url "${parent_id}/privateEndpointConnections?api-version=2023-08-01-preview" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # Container Registry
    "Microsoft.ContainerRegistry/registries/privateLinkResources")
      child_count=$(az rest --method GET --url "${parent_id}/privateLinkResources?api-version=2023-07-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # Key Vault
    "Microsoft.KeyVault/vaults/privateEndpointConnections")
      child_count=$(az rest --method GET --url "${parent_id}/privateEndpointConnections?api-version=2023-07-01" --subscription "$subscription" --query 'value | length(@)' -o tsv 2>"$error_output" || echo "0")
      ;;
      
    # Web Apps
    "Microsoft.Web/sites/functions")
      # First verify this is actually a Function App
      local app_kind=$(az webapp show --name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'kind' -o tsv 2>/dev/null || echo "")
      
      if [[ "$app_kind" =~ functionapp ]]; then
        child_count=$(az functionapp function list --name "$parent_name" --resource-group "$rg" --subscription "$subscription" --query 'length(@)' -o tsv 2>"$error_output" || echo "0")
      else
        log "Skipping non-function app: $parent_name (kind: $app_kind)"
        child_count=0
      fi
      ;;
      
    *)
      log "Unknown child resource type: $child_type - skipping"
      child_count=0
      ;;
  esac
  
  if [[ -s "$error_output" ]]; then
    log_failure "Failed to count $child_type for parent $parent_id: $(cat "$error_output")"
    child_count=0
    container_count=0
  else
    if [[ $child_count -gt 0 ]]; then
      log "Found $child_count $child_type resources for parent $parent_name"
      if [[ $container_count -gt 0 ]]; then
        log "  - $container_count identified as container hosts"
        log "  - $((child_count - container_count)) as regular resources"
      fi
    fi
  fi
  
  rm -f "$error_output"
  
  # Write result to temporary file with locking
  # Format: child_type:total_count:container_count
  if lock_file "$temp_file"; then
    echo "$child_type:$child_count:$container_count" >> "$temp_file"
    unlock_file "$temp_file"
  fi
}

# Modified count_child_resources function to handle container counts
count_child_resources() {
  local subscription="$1"
  local parent_type="$2"
  local child_type="$3"
  local parent_resources="$4"
  
  local temp_dir=$(mktemp -d)
  local results_file="$temp_dir/child_results.txt"
  local pids=()
  
  log "Counting child resources of type $child_type concurrently"
  
  # Parse parent resource IDs
  local parent_ids=$(echo "$parent_resources" | jq -r '.[]')
  local num_parents=$(echo "$parent_resources" | jq '. | length')
  log "Processing $num_parents parent resources of type $parent_type concurrently"
  
  # Launch concurrent processes for each parent
  while IFS= read -r parent_id; do
    if [[ -n "$parent_id" ]]; then
      # Manage concurrency
      while [ "${#pids[@]}" -ge "$CHILD_CONCURRENCY" ]; do
        new_pids=()
        for pid in "${pids[@]}"; do
          if kill -0 "$pid" 2>/dev/null; then
            new_pids+=("$pid")
          fi
        done
        pids=("${new_pids[@]}")
        sleep 0.1
      done
      
      # Launch background job
      count_single_child_resource "$subscription" "$parent_type" "$child_type" "$parent_id" "$results_file" &
      pids+=("$!")
    fi
  done <<< "$parent_ids"
  
  # Wait for all child counting jobs to complete
  for pid in "${pids[@]}"; do
    wait "$pid" 2>/dev/null || true
  done
  
  # Clean up any remaining locks
  rm -rf "$results_file".lock
  
  # Aggregate results - now returns "total_count:container_count"
  local total_count=0
  local total_container=0
  
  if [[ -f "$results_file" ]]; then
    while IFS=':' read -r type count container; do
      if [[ "$type" == "$child_type" && "$count" =~ ^[0-9]+$ ]]; then
        total_count=$((total_count + count))
        if [[ "$container" =~ ^[0-9]+$ ]]; then
          total_container=$((total_container + container))
        fi
      fi
    done < "$results_file"
  fi
  
  # Cleanup
  rm -rf "$temp_dir"
  
  if [[ $total_count -gt 0 ]]; then
    log "Total: $total_count $child_type resources found ($total_container container, $((total_count - total_container)) regular)"
  fi
  
  # Return both counts separated by colon
  echo "$total_count:$total_container"
}

# ------------------------
# Cleanup on exit
# ------------------------
cleanup() {
  cleanup_mapping
}
trap cleanup EXIT ERR INT TERM

# ------------------------
# Prerequisites Check
# ------------------------
check_prerequisites() {
  local scope="$1"
  
  # Check required tools
  command -v az >/dev/null 2>&1 || \
    error_exit "Azure CLI is not installed" \
    "Install it from: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
  
  command -v jq >/dev/null 2>&1 || \
    error_exit "jq is not installed" \
    "Install with: brew install jq (Mac) or apt-get install jq (Linux)"
  
  # Check authentication
  if ! az account show >/dev/null 2>&1; then
    error_exit "Not authenticated to Azure" \
    "Run: az login"
  fi
  
  success "Prerequisites verified"
  
  # Check specific scope access
  if [[ "$scope" =~ ^subscription:(.+)$ ]]; then
    local subscription_id="${BASH_REMATCH[1]}"
    info "Verifying access to subscription: $subscription_id"
    if ! az account show --subscription "$subscription_id" >/dev/null 2>&1; then
      error_exit "Unable to access subscription: $subscription_id" \
      "Check if the subscription exists and you have the required permissions"
    fi
    success "Subscription access verified"
  elif [[ "$scope" =~ ^tenant:(.+)$ ]]; then
    info "Verifying tenant access"
    if ! az account list --query "[].id" >/dev/null 2>&1; then
      error_exit "Unable to list subscriptions in tenant" \
      "Ensure you have Reader role at the tenant root level"
    fi
    success "Tenant access verified"
  fi
}

# ------------------------
# Initialize Resource Mappings
# ------------------------
initialize_mappings() {
  log "Initializing resource mappings..."
  
  # Build resource types arrays
  AZURE_RESOURCE_TYPES=($(jq -r '.clouds.azure[] | .script_resource_name' "$RESOURCE_MAPPING_JSON"))
  
  # Build child resource tracking arrays
  CHILD_RESOURCE_TYPES=()
  PARENT_RESOURCE_TYPES=()
  while IFS='|' read -r child_type parent_type; do
    if [[ -n "$child_type" && -n "$parent_type" ]]; then
      CHILD_RESOURCE_TYPES+=("$child_type")
      PARENT_RESOURCE_TYPES+=("$parent_type")
    fi
  done < <(jq -r '.clouds.azure[] | select(.is_child == true) | .script_resource_name + "|" + .parent_type' "$RESOURCE_MAPPING_JSON")
  
  log "Identified ${#CHILD_RESOURCE_TYPES[@]} child resource types"
  
  # Build workload ratios
  WORKLOAD_RATIOS_DATA=$(jq -r '.clouds.azure[] | .resource_type + ":" + (.ratio_iwl | tostring) + ":" + (.ratio_swl | tostring)' "$RESOURCE_MAPPING_JSON" | sort | uniq) # this will need to be updated to handle spaces in resource types
  
  # Build resource mapping
  RESOURCE_MAPPING=($(build_resource_mapping))

  # Debug: Check RESOURCE_MAPPING content
  log "=== RESOURCE_MAPPING Debug ==="
  log "Total mappings: ${#RESOURCE_MAPPING[@]}"
  for i in "${!RESOURCE_MAPPING[@]}"; do
      if [[ "${RESOURCE_MAPPING[$i]}" == *"subnets"* ]]; then
          log "Found subnet mapping: ${RESOURCE_MAPPING[$i]}"
      fi
  done
  
  # Build Illumio categories
  INSIGHTS_RESOURCE_TYPES=()
  while IFS= read -r type; do
    INSIGHTS_RESOURCE_TYPES+=("$type")
  done < <(jq -r '.clouds.azure[] | select(.enabled_insights == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)

  SEGMENTATION_RESOURCE_TYPES=()
  while IFS= read -r type; do
    SEGMENTATION_RESOURCE_TYPES+=("$type")
  done < <(jq -r '.clouds.azure[] | select(.enabled_segmentation == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  
  # Initialize aggregate counts
  INSIGHTS_COUNTS_AGGREGATE=()
  SEGMENTATION_COUNTS_AGGREGATE=()
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
    INSIGHTS_COUNTS_AGGREGATE[$i]=0
  done
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
    SEGMENTATION_COUNTS_AGGREGATE[$i]=0
  done
  
  build_container_host_tags
  
  # Log container host tags if verbose
  if $VERBOSE; then
    log "Container host tags loaded (child resources only):"
    local i
    for i in "${!CONTAINER_HOST_TYPES[@]}"; do
      log "  ${CONTAINER_HOST_TYPES[$i]} -> ${CONTAINER_HOST_TAG_NAMES[$i]}"
    done
    log "Child resource types:"
    for i in "${!CHILD_RESOURCE_TYPES[@]}"; do
      log "  ${CHILD_RESOURCE_TYPES[$i]} (parent: ${PARENT_RESOURCE_TYPES[$i]})"
    done
  fi
}

build_resource_mapping() {
  # Use parallel arrays instead of associative arrays
  local iwl_categories=()
  local iwl_indices=()
  local swl_categories=()
  local swl_indices=()
  
  # Build index arrays
  local iwl_cats=$(jq -r '.clouds.azure[] | select(.enabled_insights == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  local swl_cats=$(jq -r '.clouds.azure[] | select(.enabled_segmentation == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  
  local i=0
  while IFS= read -r cat; do
    if [[ -n "$cat" ]]; then
      iwl_categories+=("$cat")
      iwl_indices+=($i)
      ((i++))
    fi
  done <<< "$iwl_cats"
  
  i=0
  while IFS= read -r cat; do
    if [[ -n "$cat" ]]; then
      swl_categories+=("$cat")
      swl_indices+=($i)
      ((i++))
    fi
  done <<< "$swl_cats"
  
  # Build mapping array using parallel array lookup
  local resources=$(jq -r '.clouds.azure[] | .script_resource_name + "|" + .resource_type' "$RESOURCE_MAPPING_JSON")
  while IFS='|' read -r type cat; do
    local iwl_idx=-1
    local swl_idx=-1
    
    # Find index in iwl arrays
    for j in "${!iwl_categories[@]}"; do
      if [[ "${iwl_categories[$j]}" == "$cat" ]]; then
        iwl_idx=${iwl_indices[$j]}
        break
      fi
    done
    
    # Find index in swl arrays
    for j in "${!swl_categories[@]}"; do
      if [[ "${swl_categories[$j]}" == "$cat" ]]; then
        swl_idx=${swl_indices[$j]}
        break
      fi
    done
    
    echo "$type|$iwl_idx|$swl_idx"
  done <<< "$resources"
}

# ------------------------
# Core Functions
# ------------------------
get_workload_ratio() {
  local resource_type="$1"
  local ratio_type="$2"
  local ratio_line=$(grep -E "^${resource_type}:" <<< "$WORKLOAD_RATIOS_DATA" || echo "Other:0.01:0.01")
  if [[ "$ratio_type" == "iw" ]]; then
    cut -d':' -f2 <<< "$ratio_line"
  else
    cut -d':' -f3 <<< "$ratio_line"
  fi
}

# Cross-platform file locking
lock_file() {
  local file="$1"
  local timeout="${2:-30}"
  local lock_file="${file}.lock"
  local count=0
  
  while [ $count -lt $timeout ]; do
    if mkdir "$lock_file" 2>/dev/null; then
      return 0
    fi
    sleep 0.1
    count=$((count + 1))
  done
  return 1
}

unlock_file() {
  local file="$1"
  rmdir "${file}.lock" 2>/dev/null || true
}

resolve_scope_to_subscriptions() {
  local scope="$1"
  local ids
  
  if [[ "$scope" =~ ^subscription:(.+)$ ]]; then
    echo "${BASH_REMATCH[1]}"
  elif [[ "$scope" =~ ^tenant:(.+)$ ]]; then
    log "Fetching subscriptions from tenant"
    local error_output=$(mktemp)
    local temp_output=$(mktemp)
    
    log_api_call "Executing: az account list --query [].id"
    az account list --query "[].id" --output tsv 2> "$error_output" > "$temp_output"
    
    if [[ -s "$error_output" ]]; then
      log_failure "Failed to list subscriptions: $(cat "$error_output")"
    fi
    
    ids=$(cat "$temp_output" | grep -E '^[a-f0-9-]{36}$')
    rm -f "$error_output" "$temp_output"
    
    [[ -n "$ids" ]] || error_exit "No subscriptions found in tenant" \
      "Ensure you have at least Reader role on subscriptions"
    
    echo "$ids" | tr '\n' ' '
  else
    error_exit "Invalid scope format: $scope" \
      "Use subscription:<ID> or tenant:<ID>"
  fi
}

count_resources_for_subscription() {
  local subscription="$1"
  local temp_file="$2"
  
  declare -a insights_counts
  declare -a segmentation_counts
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do insights_counts[$i]=0; done
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do segmentation_counts[$i]=0; done
  
  log "Counting resources in subscription: $subscription"
  
  local tmp=$(mktemp)
  local error_output=$(mktemp)
  
  # Get resource type and IDs only (no tags needed for top-level)
  log_api_call "Executing: az resource list --subscription $subscription --query [].[type,id]"
  if ! az resource list \
      --subscription "$subscription" \
      --query "[].[type,id]" \
      --output json > "$tmp" 2> "$error_output"; then
    
    local error_msg=$(cat "$error_output")
    log_failure "Failed to list resources in subscription $subscription: $error_msg"
    if [[ "$error_msg" =~ "AuthorizationFailed" ]] || [[ "$error_msg" =~ "Forbidden" ]]; then
      warn "Skipping subscription $subscription: Insufficient permissions (need Reader role)"
    else
      warn "Failed to list resources in subscription $subscription"
    fi
    
    # Write zeros for this subscription
    if lock_file "$temp_file"; then
      echo -n "$subscription" >> "$temp_file"
      for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do echo -n ":0" >> "$temp_file"; done
      for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do echo -n ":0" >> "$temp_file"; done
      echo >> "$temp_file"
      unlock_file "$temp_file"
    fi
    
    rm -f "$tmp" "$error_output"
    return
  fi
  
  rm -f "$error_output"

  # Count resource groups separately (they don't appear in az resource list)
  log "Counting resource groups..."
  local rg_count=$(az group list --subscription "$subscription" --query 'length(@)' -o tsv 2>/dev/null || echo "0")
  if [[ $rg_count -gt 0 ]]; then
    log "Found $rg_count resource groups"
    
    # Find the mapping for resource groups
    for mapping in "${RESOURCE_MAPPING[@]}"; do
      IFS='|' read -r azure_type iw_index sw_index <<< "$mapping"
      if [[ "$azure_type" == "Microsoft.Resources/resourceGroups" ]]; then
        [[ $iw_index -ge 0 ]] && insights_counts[$iw_index]=$((insights_counts[$iw_index]+rg_count))
        [[ $sw_index -ge 0 ]] && segmentation_counts[$sw_index]=$((segmentation_counts[$sw_index]+rg_count))
        log "Added $rg_count resource groups to indices (IW:$iw_index, SW:$sw_index)"
        break
      fi
    done
  fi

  log "Counting subscription resource..."
  for mapping in "${RESOURCE_MAPPING[@]}"; do
    IFS='|' read -r azure_type iw_index sw_index <<< "$mapping"
    if [[ "$azure_type" == "Microsoft.Subscription/subscription" ]]; then
      [[ $iw_index -ge 0 ]] && insights_counts[$iw_index]=$((insights_counts[$iw_index]+1))
      [[ $sw_index -ge 0 ]] && segmentation_counts[$sw_index]=$((segmentation_counts[$sw_index]+1))
      log "Added 1 subscription to indices (IW:$iw_index, SW:$sw_index)"
      break
    fi
  done
  
  # Track parent resources for child counting
  declare -A parent_resource_ids
  
  # Process resources - NO TAG CHECKING for top-level resources
  local resources_json=$(cat "$tmp")
  if [[ -n "$resources_json" && "$resources_json" != "[]" ]]; then
    local num_resources=$(echo "$resources_json" | jq '. | length')
    log "Found $num_resources top-level resources"
    
    # First pass: count parent resources and collect their IDs
    for ((j=0; j<$num_resources; j++)); do
      local resource_type=$(echo "$resources_json" | jq -r ".[$j][0] // \"\"" | tr -d '[:space:]')
      local resource_id=$(echo "$resources_json" | jq -r ".[$j][1] // \"\"")
      
      if [[ -n "$resource_type" ]]; then
        # Skip if this is a child resource type
        if is_child_resource "$resource_type"; then
          continue
        fi
        
        # Check if this resource type is a parent type (has children defined)
        local is_parent=false
        for pt in "${PARENT_RESOURCE_TYPES[@]}"; do
          if [[ "$resource_type" == "$pt" ]]; then
            is_parent=true
            break
          fi
        done
        
        # Store parent resource IDs for later child counting
        if [[ "$is_parent" == "true" && -n "$resource_id" ]]; then
          if [[ ! -v parent_resource_ids[$resource_type] ]]; then
            parent_resource_ids[$resource_type]="[]"
          fi
          parent_resource_ids[$resource_type]=$(echo "${parent_resource_ids[$resource_type]}" | jq ". + [\"$resource_id\"]")
        fi
        
        # Count as original resource type (NO TAG CHECKING)
        for mapping in "${RESOURCE_MAPPING[@]}"; do
          IFS='|' read -r azure_type iw_index sw_index <<< "$mapping"
          if [[ "$resource_type" == "$azure_type" ]]; then
            [[ $iw_index -ge 0 ]] && insights_counts[$iw_index]=$((insights_counts[$iw_index]+1))
            [[ $sw_index -ge 0 ]] && segmentation_counts[$sw_index]=$((segmentation_counts[$sw_index]+1))
            break
          fi
        done
      fi
    done
    
    # Second pass: count child resources (WITH TAG CHECKING for supported types)
    log "Checking for child resources..."
    for i in "${!CHILD_RESOURCE_TYPES[@]}"; do
      local child_type="${CHILD_RESOURCE_TYPES[$i]}"
      local parent_type="${PARENT_RESOURCE_TYPES[$i]}"
      
      # Check if we have any parent resources of this type
      if [[ -v parent_resource_ids[$parent_type] ]] && [[ -n "${parent_resource_ids[$parent_type]}" ]]; then
        log "Counting child resources: $child_type for parent type: $parent_type"
        
        # Get both total count and container count
        local counts_result=$(count_child_resources "$subscription" "$parent_type" "$child_type" "${parent_resource_ids[$parent_type]}")
        IFS=':' read -r child_count container_count <<< "$counts_result"
        
        if [[ $child_count -gt 0 ]]; then
          log "Found $child_count resources of type $child_type"
          
          # Calculate regular (non-container) count
          local regular_count=$((child_count - container_count))
          
          # Add container counts to Cloud Container category
          if [[ $container_count -gt 0 ]]; then
            local container_cat="Cloud Container"
            for j in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
              if [[ "${INSIGHTS_RESOURCE_TYPES[$j]}" == "$container_cat" ]]; then
                insights_counts[$j]=$((insights_counts[$j]+container_count))
                break
              fi
            done
            
            for j in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
              if [[ "${SEGMENTATION_RESOURCE_TYPES[$j]}" == "$container_cat" ]]; then
                segmentation_counts[$j]=$((segmentation_counts[$j]+container_count))
                break
              fi
            done
            
            log "Added $container_count to Cloud Container category"
          fi
          
          # Add regular counts to appropriate categories
          if [[ $regular_count -gt 0 ]]; then
            local found_mapping=false
            for mapping in "${RESOURCE_MAPPING[@]}"; do
              IFS='|' read -r azure_type iw_index sw_index <<< "$mapping"
              if [[ "$child_type" == "$azure_type" ]]; then
                [[ $iw_index -ge 0 ]] && insights_counts[$iw_index]=$((insights_counts[$iw_index]+regular_count))
                [[ $sw_index -ge 0 ]] && segmentation_counts[$sw_index]=$((segmentation_counts[$sw_index]+regular_count))
                found_mapping=true
                log "Successfully mapped $child_type: added $regular_count to indices (IW:$iw_index, SW:$sw_index)"
                break
              fi
            done
            
            if ! $found_mapping; then
              warn "CHILD RESOURCE NOT IN MAPPING: $child_type - $regular_count resources NOT added to totals!"
            fi
          fi
        fi
      fi
    done
  fi
  
  rm -f "$tmp"
  
  # Write results
  if lock_file "$temp_file"; then
    echo -n "$subscription" >> "$temp_file"
    for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
      echo -n ":${insights_counts[$i]}" >> "$temp_file"
    done
    for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
      echo -n ":${segmentation_counts[$i]}" >> "$temp_file"
    done
    echo >> "$temp_file"
    unlock_file "$temp_file"
  fi
  
  success "Finished counting resources for $subscription (including child resources)"
}

count_resources_concurrently() {
  local subscriptions_str="$1"
  IFS=' ' read -r -a subscriptions <<< "$subscriptions_str"
  
  local dir=$(mktemp -d)
  local out="$dir/counts.txt"
  local pids=()
  
  info "Scanning ${#subscriptions[@]} subscription(s)..."
  
  for s in "${subscriptions[@]}"; do
    if [[ -n "$s" && "$s" =~ ^[a-f0-9-]{36}$ ]]; then
      # Manage concurrency
      while [ "${#pids[@]}" -ge "$CONCURRENCY" ]; do
        new_pids=()
        for pid in "${pids[@]}"; do
          if kill -0 "$pid" 2>/dev/null; then
            new_pids+=("$pid")
          fi
        done
        pids=("${new_pids[@]}")
        sleep 0.1
      done
      
      count_resources_for_subscription "$s" "$out" &
      pids+=("$!")
    fi
  done
  
  # Wait for all jobs
  for pid in "${pids[@]}"; do 
    wait "$pid" 2>/dev/null || true
  done
  
  # Clean up locks
  rm -rf "$out".lock
  
  # Aggregate results
  if [[ -f "$out" ]]; then
    while IFS=':' read -r sub rest; do
      if [[ -n "$sub" && -n "$rest" ]]; then
        IFS=':' read -r -a vals <<< "$rest"
        local val_index=0
        
        for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
          if [[ $val_index -lt ${#vals[@]} && ${vals[$val_index]} =~ ^[0-9]+$ ]]; then
            INSIGHTS_COUNTS_AGGREGATE[$i]=$((INSIGHTS_COUNTS_AGGREGATE[$i] + vals[val_index]))
          fi
          val_index=$((val_index + 1))
        done
        
        for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
          if [[ $val_index -lt ${#vals[@]} && ${vals[$val_index]} =~ ^[0-9]+$ ]]; then
            SEGMENTATION_COUNTS_AGGREGATE[$i]=$((SEGMENTATION_COUNTS_AGGREGATE[$i] + vals[val_index]))
          fi
          val_index=$((val_index + 1))
        done
      fi
    done < "$out"
  fi
  
  rm -rf "$dir"
}

calculate_workloads() {
  local total_iw=0 total_sw=0
  
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
    local ct=${INSIGHTS_COUNTS_AGGREGATE[$i]}
    local rt=${INSIGHTS_RESOURCE_TYPES[$i]}
    local iw=$(get_workload_ratio "$rt" iw)
    iw=$(echo "$iw" | tr -d '[:space:]')
    
    if [[ -n "$iw" && "$iw" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$iw" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        total_iw=$(awk -v total="$total_iw" -v ct="$ct" -v iw="$iw" 'BEGIN {print total + ct * iw}')
      fi
    fi
  done
  
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
    local ct=${SEGMENTATION_COUNTS_AGGREGATE[$i]}
    local rt=${SEGMENTATION_RESOURCE_TYPES[$i]}
    local sw=$(get_workload_ratio "$rt" sw)
    sw=$(echo "$sw" | tr -d '[:space:]')
    
    if [[ -n "$sw" && "$sw" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$sw" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        total_sw=$(awk -v total="$total_sw" -v ct="$ct" -v sw="$sw" 'BEGIN {print total + ct * sw}')
      fi
    fi
  done
  
  # Round up
  total_iw=$(echo "$total_iw" | awk '{print int($1+0.999)}')
  total_sw=$(echo "$total_sw" | awk '{print int($1+0.999)}')
  echo "$total_iw:$total_sw"
}

print_summary() {
  local scope="$1"
  local label=""
  
  # Format label based on scope
  if [[ "$scope" =~ ^tenant:(.+)$ ]]; then
    label="Azure Tenant: ${BASH_REMATCH[1]}"
  elif [[ "$scope" =~ ^subscription:(.+)$ ]]; then
    label="Azure Subscription: ${BASH_REMATCH[1]}"
  fi
  
  echo
  echo "╔═══════════════════════════════════════════════════════════╗"
  echo -e "${BOLD} 📊 Resource Summary for $label${RESET}"
  echo "╚═══════════════════════════════════════════════════════════╝"
  echo
  
  # Insights Workloads
  echo -e "${BOLD}${BLUE} 🔍 Illumio Insights Workloads (IWL)${RESET}"
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s %-10s${RESET}\n" "Resource Type" "Count" "IWL"
  echo "────────────────────────────────────────────────────────────────"
  
  local total_insights_resources=0
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
    local rt=${INSIGHTS_RESOURCE_TYPES[$i]}
    local count=${INSIGHTS_COUNTS_AGGREGATE[$i]}
    local ratio=$(get_workload_ratio "$rt" iw)
    local workload=0
    
    total_insights_resources=$((total_insights_resources + count))
    
    ratio=$(echo "$ratio" | tr -d '[:space:]')
    if [[ -n "$ratio" && "$ratio" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$ratio" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        workload=$(awk -v count="$count" -v ratio="$ratio" 'BEGIN {printf "%.2f", count * ratio}')
      fi
    fi
    
    if [[ $count -gt 0 ]]; then
      printf "%-40s %-10s %-10s\n" "$rt" "$count" "$workload"
    fi
  done
  
  local w=$(calculate_workloads)
  IFS=':' read -r total_iw total_sw <<< "$w"
  
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s ${GREEN}%-10s${RESET}\n" "TOTAL" "$total_insights_resources" "$total_iw IWLs"
  echo
  
  # Segmentation Workloads
  echo -e "${BOLD}${BLUE} 🛡 Illumio Segmentation Workloads (SWL)${RESET}"
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s %-10s${RESET}\n" "Resource Type" "Count" "SWL"
  echo "────────────────────────────────────────────────────────────────"
  
  local total_segmentation_resources=0
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
    local rt=${SEGMENTATION_RESOURCE_TYPES[$i]}
    local count=${SEGMENTATION_COUNTS_AGGREGATE[$i]}
    local ratio=$(get_workload_ratio "$rt" sw)
    local workload=0
    
    total_segmentation_resources=$((total_segmentation_resources + count))
    
    ratio=$(echo "$ratio" | tr -d '[:space:]')
    if [[ -n "$ratio" && "$ratio" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$ratio" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        workload=$(awk -v count="$count" -v ratio="$ratio" 'BEGIN {printf "%.2f", count * ratio}')
      fi
    fi
    
    if [[ $count -gt 0 ]]; then
      printf "%-40s %-10s %-10s\n" "$rt" "$count" "$workload"
    fi
  done
  
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s ${GREEN}%-10s${RESET}\n" "TOTAL" "$total_segmentation_resources" "$total_sw SWLs"
}

print_help() {
  echo -e "${BOLD}$SCRIPT_NAME${RESET}

${BOLD}USAGE:${RESET}
  $0 --scope <scope> [options]

${BOLD}REQUIRED:${RESET}
  --scope <scope>    Specify the Azure scope to scan:
                     • subscription:<SUBSCRIPTION_ID>  - Single subscription
                     • tenant:<TENANT_ID>              - All subscriptions in tenant

${BOLD}OPTIONS:${RESET}
  --verbose          Enable detailed logging
  --help             Show this help message

${BOLD}EXAMPLES:${RESET}
  # Scan a single subscription
  $0 --scope subscription:12345678-1234-1234-1234-123456789012

  # Scan all subscriptions in tenant
  $0 --scope tenant:default

  # Scan with verbose output
  $0 --scope tenant:default --verbose

${BOLD}PREREQUISITES:${RESET}
  • Azure CLI installed and authenticated (az login)
  • jq utility installed
  • Appropriate Azure RBAC permissions

${BOLD}REQUIRED PERMISSIONS:${RESET}
  • Reader role on target subscriptions
  • Microsoft.Resources/subscriptions/resources/read

${BOLD}NOTES:${RESET}
  • The script will skip subscriptions where you lack permissions
  • Resource counts are aggregated across all accessible subscriptions"
}

# ------------------------
# Main Function
# ------------------------
main() {
  local scope=""
  local help=false
  local verbose=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --scope)
        scope="$2"
        shift 2
        ;;
      --verbose)
        verbose=true
        shift
        ;;
      --help)
        help=true
        shift
        ;;
      *)
        error_exit "Unknown option: $1" \
        "Run '$0 --help' for usage information"
        ;;
    esac
  done
  
  if $help; then
    print_help
    exit 0
  fi
  
  VERBOSE=$verbose
  
  if [[ -z "$scope" ]]; then
    error_exit "Scope is required" \
    "Use --scope subscription:<ID> or tenant:<ID>"
  fi
  
  # Validate scope format
  if ! [[ "$scope" =~ ^(subscription|tenant):(.+)$ ]]; then
    error_exit "Invalid scope format: $scope" \
    "Use format: subscription:<ID> or tenant:<ID>"
  fi
  
  info "Starting $SCRIPT_NAME"
  
  # Check prerequisites
  check_prerequisites "$scope"
  
  # Load resource mappings
  load_resource_mapping
  
  # Initialize mappings
  initialize_mappings
  
  # Resolve scope to subscriptions
  progress "Resolving scope to subscriptions..."
  local subscriptions=$(resolve_scope_to_subscriptions "$scope")
  if [[ -z "$subscriptions" ]]; then
    error_exit "No accessible subscriptions found in scope: $scope" \
    "Verify you have Reader role on at least one subscription"
  fi
  
  # Convert to array for counting
  IFS=' ' read -r -a subscriptions_array <<< "$subscriptions"
  info "Found ${#subscriptions_array[@]} subscription(s) to scan"
  
  # Count resources
  progress "Scanning resources (this may take a few minutes)..."
  count_resources_concurrently "$subscriptions"
  
  # Print summary
  print_summary "$scope"
}

# Execute main function
main "$@"