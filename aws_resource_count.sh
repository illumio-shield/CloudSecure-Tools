#!/usr/bin/env bash

set -euo pipefail

# Check Bash version (requires 4.0+ for associative arrays)
if [[ "${BASH_VERSION%%.*}" -lt 4 ]]; then
  echo "Error: This script requires Bash 4.0 or later"
  echo "You have Bash version: $BASH_VERSION"
  exit 1
fi

# Trap Ctrl+C (SIGINT) and clean up
trap_ctrlc() {
  kill 0
  exit 130
}
trap trap_ctrlc SIGINT SIGTERM

SCRIPT_NAME="AWS Resource Counter for Illumio"

# ------------------------
# Configuration
# ------------------------
VERBOSE=false
SCOPE=""
ROLE_NAME=""  # Required - will be set from command line
EXTERNAL_ID=""  # Required for custom roles, not used for OrganizationAccountAccessRole
DEFAULT_ROLE="OrganizationAccountAccessRole"  # AWS Organizations default role
CONCURRENCY_ACCOUNTS=5   # Fixed concurrency for accounts
CONCURRENCY_REGIONS=7    # Fixed concurrency for regions

export AWS_RETRY_MODE="adaptive"
export AWS_MAX_ATTEMPTS=5

# ------------------------
# Resource Mapping Configuration
# ------------------------
RESOURCE_MAPPING_URL="https://cloudsecure-onboarding-templates.s3.us-west-2.amazonaws.com/cloudsecure/resources.json"
RESOURCE_MAPPING_JSON=""  # Will be set dynamically
MAPPING_VERSION=""
MAPPING_DATE=""
USING_FALLBACK=false

FALLBACK_RESOURCE_MAPPING_BASE64=""

# ------------------------
# Color codes for output
# ------------------------
RED=$'\033[31m'
GREEN=$'\033[32m'
YELLOW=$'\033[33m'
BLUE=$'\033[36m'
WHITE=$'\033[37m'
BOLD=$'\033[1m'
RESET=$'\033[0m'

# Global context for logging
CURRENT_ACCOUNT_ID=""
CURRENT_REGION=""
temp_dir=""

# ------------------------
# Output Functions
# ------------------------
log() {
  if $VERBOSE; then
    local context=""
    [[ -n "$CURRENT_ACCOUNT_ID" ]] && context="[$CURRENT_ACCOUNT_ID"
    [[ -n "$CURRENT_REGION" && "$CURRENT_REGION" != "global" ]] && context="${context}:$CURRENT_REGION"
    [[ -n "$context" ]] && context="$context] "
    echo -e "${WHITE}[LOG] ${context}$1${RESET}" >&2
  fi
}

error_exit() {
  echo -e "${RED}✗ Error: $1${RESET}" >&2
  echo -e "${YELLOW}  Tip: $2${RESET}" >&2 2>/dev/null || true
  exit 1
}

warn() {
  echo -e "${YELLOW}⚠ Warning: $1${RESET}" >&2
}

info() {
  echo -e "${BLUE}ℹ $1${RESET}" >&2
}

success() {
  echo -e "${GREEN}✔ $1${RESET}" >&2
}

progress() {
  echo -e "${WHITE}⏳ $1${RESET}" >&2
}

# ------------------------
# Resource Mapping Functions
# ------------------------
decode_fallback_mapping() {
  if [[ -z "$FALLBACK_RESOURCE_MAPPING_BASE64" ]]; then
    error_exit "No embedded fallback resource mapping found" \
      "Please ensure the FALLBACK_RESOURCE_MAPPING_BASE64 variable is populated"
  fi
  echo "$FALLBACK_RESOURCE_MAPPING_BASE64" | base64 -d || {
    error_exit "Failed to decode embedded resource mappings" \
      "The embedded fallback may be corrupted"
  }
}

fetch_remote_mapping() {
  local temp_file=$(mktemp)
  local error_file=$(mktemp)
  local success=false
  
  # Try to fetch with curl (primary method)
  if command -v curl >/dev/null 2>&1; then
    log "Fetching resource mappings via curl..."
    if curl -sS --connect-timeout 5 --max-time 10 \
         "$RESOURCE_MAPPING_URL" \
         -o "$temp_file" 2>"$error_file"; then
      if [[ -s "$temp_file" ]] && jq -e '.clouds' "$temp_file" >/dev/null 2>&1; then
        cat "$temp_file"
        success=true
      else
        log "Downloaded file is invalid or empty"
      fi
    else
      log "Curl failed: $(cat "$error_file")"
    fi
  # Fallback to wget if curl not available
  elif command -v wget >/dev/null 2>&1; then
    log "Fetching resource mappings via wget..."
    if wget -q --timeout=10 -O "$temp_file" \
         "$RESOURCE_MAPPING_URL" 2>"$error_file"; then
      if [[ -s "$temp_file" ]] && jq -e '.clouds' "$temp_file" >/dev/null 2>&1; then
        cat "$temp_file"
        success=true
      else
        log "Downloaded file is invalid or empty"
      fi
    else
      log "Wget failed: $(cat "$error_file")"
    fi
  else
    log "Neither curl nor wget available for fetching remote mappings"
  fi
  
  rm -f "$temp_file" "$error_file"
  
  if $success; then
    return 0
  else
    return 1
  fi
}

load_resource_mapping() {
  local temp_mapping_file=$(mktemp)
  
  if fetch_remote_mapping > "$temp_mapping_file" 2>/dev/null; then
    RESOURCE_MAPPING_JSON="$temp_mapping_file"
    USING_FALLBACK=false
    info "Successfully fetched latest resource mappings"
  else
    decode_fallback_mapping > "$temp_mapping_file"
    RESOURCE_MAPPING_JSON="$temp_mapping_file"
    USING_FALLBACK=true
    
    warn "Using fallback resource mappings (remote source unavailable)"
  fi
  
  # Validate JSON structure
  if ! jq -e '.clouds.aws' "$RESOURCE_MAPPING_JSON" >/dev/null 2>&1; then
    error_exit "Invalid JSON structure in resource mappings" \
      "The resource mapping file is corrupted or has an unexpected format"
  fi
  
  # Extract version and date
  MAPPING_VERSION=$(jq -r '.version // "unknown"' "$RESOURCE_MAPPING_JSON" 2>/dev/null)
  MAPPING_DATE=$(jq -r '.updatedDate // "unknown"' "$RESOURCE_MAPPING_JSON" 2>/dev/null)
  
  # Display mapping info
  local mapping_source=$($USING_FALLBACK && echo "embedded" || echo "latest")
  info "Resource mappings loaded (${mapping_source} - v${MAPPING_VERSION}, updated: ${MAPPING_DATE})"
}

cleanup_mapping() {
  if [[ -n "$RESOURCE_MAPPING_JSON" && -f "$RESOURCE_MAPPING_JSON" ]]; then
    rm -f "$RESOURCE_MAPPING_JSON"
  fi
}

# ------------------------
# Cleanup on exit
# ------------------------
cleanup() {
  [[ -n "$temp_dir" && -d "$temp_dir" ]] && rm -rf "$temp_dir"
  cleanup_mapping
}
trap cleanup EXIT ERR INT TERM

# ------------------------
# Prerequisites Check
# ------------------------
check_prerequisites() {
  # Check required tools
  command -v aws >/dev/null 2>&1 || \
    error_exit "AWS CLI is not installed" \
    "Install it from: https://aws.amazon.com/cli/"
  
  command -v jq >/dev/null 2>&1 || \
    error_exit "jq is not installed" \
    "Install with: brew install jq (Mac) or apt-get install jq (Linux)"
  
  # Check authentication
  if ! aws sts get-caller-identity >/dev/null 2>&1; then
    error_exit "Not authenticated to AWS" \
    "Configure credentials with: aws configure"
  fi
  
  success "Prerequisites verified"
}

# ------------------------
# Initialize Resource Mappings
# ------------------------
initialize_mappings() {
  log "Initializing resource mappings..."
  
  # Build resource lists
  AWS_RESOURCE_TYPES=($(jq -r '.clouds.aws[].script_resource_name' "$RESOURCE_MAPPING_JSON"))
  
  # Build workload ratios - properly handle spaces in resource types
  WORKLOAD_RATIOS_DATA=$(jq -r '.clouds.aws[] | 
    .resource_type + ":" + (.ratio_iwl | tostring) + ":" + (.ratio_swl | tostring)' \
    "$RESOURCE_MAPPING_JSON" | sort | uniq)
  
  # Build resource mapping for category assignment - use a different delimiter to handle spaces
  RESOURCE_MAPPING=()
  while IFS= read -r line; do
    RESOURCE_MAPPING+=("$line")
  done < <(jq -r '.clouds.aws[] | 
    .script_resource_name + "^" + 
    (.enabled_insights | tostring) + "^" + 
    (.enabled_segmentation | tostring) + "^" + 
    .resource_type' "$RESOURCE_MAPPING_JSON")
  
  # Build Illumio categories - properly handle spaces
  INSIGHTS_RESOURCE_TYPES=()
  while IFS= read -r type; do
    [[ -n "$type" ]] && INSIGHTS_RESOURCE_TYPES+=("$type")
  done < <(jq -r '.clouds.aws[] | select(.enabled_insights == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)

  SEGMENTATION_RESOURCE_TYPES=()
  while IFS= read -r type; do
    [[ -n "$type" ]] && SEGMENTATION_RESOURCE_TYPES+=("$type")
  done < <(jq -r '.clouds.aws[] | select(.enabled_segmentation == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  
  # Initialize global aggregate counts
  declare -gA GLOBAL_INSIGHTS_COUNTS
  declare -gA GLOBAL_SEGMENTATION_COUNTS
  
  for rt in "${INSIGHTS_RESOURCE_TYPES[@]}"; do
    GLOBAL_INSIGHTS_COUNTS["$rt"]=0
  done
  for rt in "${SEGMENTATION_RESOURCE_TYPES[@]}"; do
    GLOBAL_SEGMENTATION_COUNTS["$rt"]=0
  done
}

# ------------------------
# Core Functions
# ------------------------
set_context() {
  CURRENT_ACCOUNT_ID="$1"
  CURRENT_REGION="${2:-}"
}

get_workload_ratio() {
  local resource_type="$1"
  local ratio_type="$2"
  local ratio_line=$(grep -E "^${resource_type}:" <<< "$WORKLOAD_RATIOS_DATA" || echo "Other:0.01:0.01")
  [[ "$ratio_type" == "iw" ]] && cut -d':' -f2 <<< "$ratio_line" || cut -d':' -f3 <<< "$ratio_line"
}

# Get container host tag for a resource
get_container_host_tag() {
  local resource_name="$1"
  local tag=$(jq -r --arg name "$resource_name" \
    '.clouds.aws[] | select(.script_resource_name == $name) | .container_host_tag // ""' \
    "$RESOURCE_MAPPING_JSON" 2>/dev/null)
  echo "$tag"
}

is_global_resource() {
  local resource_name="$1"
  local config=$(jq -c --arg name "$resource_name" \
    '.clouds.aws[] | select(.script_resource_name == $name)' "$RESOURCE_MAPPING_JSON")
  local is_global=$(jq -r '.is_global' <<< "$config" 2>/dev/null || echo "false")
  [[ "$is_global" == "true" ]]
}

get_all_regions() {
  log "Fetching AWS regions..."
  local regions=$(aws ec2 describe-regions --query 'Regions[].RegionName' --output text 2>/dev/null | tr '\t' '\n')
  if [[ -z "$regions" ]]; then
    warn "Failed to get regions dynamically, using default set"
    echo "us-east-1
us-east-2
us-west-1
us-west-2
eu-west-1
eu-west-2
eu-west-3
eu-central-1
eu-north-1
ap-southeast-1
ap-southeast-2
ap-northeast-1
ap-northeast-2
ap-south-1
ca-central-1
sa-east-1"
  else
    echo "$regions"
  fi
}

# Count single resource type
count_single_resource() {
  local resource_name="$1"
  local region="$2"
  
  # Get resource config from JSON
  local config=$(jq -c --arg name "$resource_name" \
    '.clouds.aws[] | select(.script_resource_name == $name)' "$RESOURCE_MAPPING_JSON")
  
  [[ -z "$config" ]] && echo "0" && return
  
  local api_command=$(jq -r '.api_command' <<< "$config")
  local count_query=$(jq -r '.count_query' <<< "$config")
  
  [[ -z "$api_command" || "$api_command" == "null" ]] && echo "0" && return
  
  # Special case for IAM account (always returns 1)
  [[ "$resource_name" == "iam:account" ]] && echo "1" && return
  
  # Detect if this is a complex command by checking for shell operators
  if [[ "$api_command" =~ [\|\$\`\;] ]] || [[ "$api_command" =~ (xargs|awk|while|for) ]]; then
    # Complex command - execute as shell command with region substitution
    local cmd="${api_command//\$AWS_REGION/$region}"
    log "Executing complex command for $resource_name"
    
    if $VERBOSE; then
      local error_output=$(mktemp)
      local result=$(eval "$cmd" 2>"$error_output" || echo "0")
      if [[ -s "$error_output" ]]; then
        local error_msg=$(cat "$error_output")
        if [[ "$error_msg" =~ "UnauthorizedOperation" ]] || [[ "$error_msg" =~ "AccessDenied" ]]; then
          log "  ⚠ Permission denied for $resource_name: Missing required IAM permission"
        elif [[ "$error_msg" =~ "InvalidAction" ]]; then
          log "  ⚠ Invalid action for $resource_name: API may not be available in this region"
        else
          log "  ⚠ Error executing $resource_name: $error_msg"
        fi
      fi
      rm -f "$error_output"
    else
      local result=$(eval "$cmd" 2>/dev/null || echo "0")
    fi
    
    local count="$result"
  else
    # Simple command - standard AWS CLI call
    local cmd="aws $api_command --output json"
    is_global_resource "$resource_name" || cmd+=" --region $region"
    
    if $VERBOSE; then
      local error_output=$(mktemp)
      local output=$(eval "$cmd" 2>"$error_output" || echo "")
      if [[ -s "$error_output" ]]; then
        local error_msg=$(cat "$error_output")
        if [[ "$error_msg" =~ "UnauthorizedOperation" ]] || [[ "$error_msg" =~ "AccessDenied" ]]; then
          log "  ⚠ Permission denied for $resource_name: Missing required IAM permission"
        elif [[ "$error_msg" =~ "InvalidAction" ]]; then
          log "  ⚠ Invalid action for $resource_name: API may not be available in this region"
        else
          log "  ⚠ Error executing $resource_name: $error_msg"
        fi
      fi
      rm -f "$error_output"
    else
      local output=$(eval "$cmd" 2>/dev/null || echo "")
    fi
    
    [[ -z "$output" || "$output" == "null" || "$output" == "{}" || "$output" == "[]" ]] && echo "0" && return
    
    # Parse count using JMESPath query
    local count=$(echo "$output" | jq -r "$count_query" 2>/dev/null || echo "0")
  fi
  
  # Check for container host tag on EC2 instances
  if [[ "$resource_name" == "ec2:instance" && "$count" -gt 0 ]]; then
    local container_tags=$(get_container_host_tag "$resource_name")
    if [[ -n "$container_tags" ]]; then
      # Split instances into container and non-container
      local container_count=0
      local vm_count=0
      
      # Build JQ filter for all tags
      local tag_filters=""
      IFS=',' read -ra TAGS <<< "$container_tags"
      for tag in "${TAGS[@]}"; do
        [[ -n "$tag_filters" ]] && tag_filters="$tag_filters, "
        tag_filters="${tag_filters}(Tags[?Key==\`${tag}\`].Value | [0])"
      done
      
      # Get detailed instance info with all specified tags
      local instances_json=$(aws ec2 describe-instances --region "$region" \
        --query "Reservations[].Instances[].[${tag_filters}]" \
        --output json 2>/dev/null || echo "[]")
      
      if [[ -n "$instances_json" && "$instances_json" != "[]" ]]; then
        while IFS= read -r line; do
          # Check if any of the tag values are non-null
          local is_container=false
          for value in $(echo "$line" | jq -r '.[]'); do
            if [[ "$value" != "null" && -n "$value" ]]; then
              is_container=true
              break
            fi
          done
          
          if $is_container; then
            container_count=$((container_count + 1))
          else
            vm_count=$((vm_count + 1))
          fi
        done < <(echo "$instances_json" | jq -c '.[]')
      else
        vm_count=$count
      fi
      
      # Store the split counts for later processing
      echo "${vm_count}:${container_count}"
      
      log "VM count: $vm_count, Container count: $container_count"
      return
    fi
  fi
  
  [[ "$count" =~ ^[0-9]+$ ]] && echo "$count" || echo "0"
}

# Process resources for a region
count_resources_for_region() {
  local region="$1"
  local account_id="$2"
  local out="$3"
  
  set_context "$account_id" "$region"
  export AWS_REGION="$region"
  export AWS_DEFAULT_REGION="$region"
  
  log "Processing region: $region"
  
  declare -A local_insights_counts
  declare -A local_segmentation_counts
  
  # Initialize local counts
  for rt in "${INSIGHTS_RESOURCE_TYPES[@]}"; do
    local_insights_counts["$rt"]=0
  done
  for rt in "${SEGMENTATION_RESOURCE_TYPES[@]}"; do
    local_segmentation_counts["$rt"]=0
  done
  
  # Process resources sequentially for reliability
  local total_found=0
  
  for resource_name in "${AWS_RESOURCE_TYPES[@]}"; do
    if ! is_global_resource "$resource_name"; then
      # Small delay to avoid API throttling
      [[ $CONCURRENCY_REGIONS -gt 5 ]] || sleep 0.$((RANDOM % 2))
      
      local count_result=$(count_single_resource "$resource_name" "$region")
      
      # Check if this is a split count (VM:Container)
      if [[ "$count_result" =~ ^([0-9]+):([0-9]+)$ ]]; then
        local vm_count="${BASH_REMATCH[1]}"
        local container_count="${BASH_REMATCH[2]}"
        
        # Process VM instances
        if [[ $vm_count -gt 0 ]]; then
          total_found=$((total_found + vm_count))
          log "  Found $vm_count × $resource_name (VMs)"
          
          # Map VMs to original resource type
          for mapping in "${RESOURCE_MAPPING[@]}"; do
            IFS='^' read -r res_name enabled_insights enabled_segmentation resource_type <<< "$mapping"
            if [[ "$resource_name" == "$res_name" ]]; then
              if [[ "$enabled_insights" == "true" ]]; then
                local_insights_counts["$resource_type"]=$((local_insights_counts["$resource_type"] + vm_count))
              fi
              if [[ "$enabled_segmentation" == "true" ]]; then
                local_segmentation_counts["$resource_type"]=$((local_segmentation_counts["$resource_type"] + vm_count))
              fi
              break
            fi
          done
        fi
        
        # Process container instances
        if [[ $container_count -gt 0 ]]; then
          total_found=$((total_found + container_count))
          log "  Found $container_count × $resource_name (Container hosts)"
          
          # Map containers to Cloud Container type
          local_insights_counts["Cloud Container"]=$((local_insights_counts["Cloud Container"] + container_count))
          local_segmentation_counts["Cloud Container"]=$((local_segmentation_counts["Cloud Container"] + container_count))
        fi
      else
        # Normal processing for non-split counts
        local count="$count_result"
        if [[ "$count" =~ ^[0-9]+$ && $count -gt 0 ]]; then
          total_found=$((total_found + count))
          log "  Found $count × $resource_name"
          
          # Map to Illumio categories
          for mapping in "${RESOURCE_MAPPING[@]}"; do
            IFS='^' read -r res_name enabled_insights enabled_segmentation resource_type <<< "$mapping"
            if [[ "$resource_name" == "$res_name" ]]; then
              if [[ "$enabled_insights" == "true" ]]; then
                local_insights_counts["$resource_type"]=$((local_insights_counts["$resource_type"] + count))
              fi
              if [[ "$enabled_segmentation" == "true" ]]; then
                local_segmentation_counts["$resource_type"]=$((local_segmentation_counts["$resource_type"] + count))
              fi
              break
            fi
          done
        fi
      fi
    fi
  done
  
  log "Region $region complete: $total_found resources"
  
  # Write results
  {
    echo "REGION_START:$region"
    for rt in "${!local_insights_counts[@]}"; do
      [[ ${local_insights_counts[$rt]} -gt 0 ]] && \
        echo "INSIGHTS:$rt:${local_insights_counts[$rt]}"
    done
    for rt in "${!local_segmentation_counts[@]}"; do
      [[ ${local_segmentation_counts[$rt]} -gt 0 ]] && \
        echo "SEGMENTATION:$rt:${local_segmentation_counts[$rt]}"
    done
    echo "REGION_END:$region"
  } >> "$out"
}

# Process global resources
count_global_resources() {
  local account_id="$1"
  local out="$2"
  
  set_context "$account_id" "global"
  log "Processing global resources"
  
  declare -A local_insights_counts
  declare -A local_segmentation_counts
  
  for rt in "${INSIGHTS_RESOURCE_TYPES[@]}"; do
    local_insights_counts["$rt"]=0
  done
  for rt in "${SEGMENTATION_RESOURCE_TYPES[@]}"; do
    local_segmentation_counts["$rt"]=0
  done
  
  local total_found=0
  
  for resource_name in "${AWS_RESOURCE_TYPES[@]}"; do
    is_global_resource "$resource_name" || continue
    
    local count=$(count_single_resource "$resource_name" "us-east-1")
    
    if [[ "$count" =~ ^[0-9]+$ && $count -gt 0 ]]; then
      total_found=$((total_found + count))
      log "  Found $count × $resource_name (global)"
      
      # Map to categories
      for mapping in "${RESOURCE_MAPPING[@]}"; do
        IFS='^' read -r res_name enabled_insights enabled_segmentation resource_type <<< "$mapping"
        if [[ "$resource_name" == "$res_name" ]]; then
          if [[ "$enabled_insights" == "true" ]]; then
            local_insights_counts["$resource_type"]=$((local_insights_counts["$resource_type"] + count))
          fi
          if [[ "$enabled_segmentation" == "true" ]]; then
            local_segmentation_counts["$resource_type"]=$((local_segmentation_counts["$resource_type"] + count))
          fi
          break
        fi
      done
    fi
  done
  
  log "Global resources complete: $total_found resources"
  
  # Write results
  {
    echo "GLOBAL_START"
    for rt in "${!local_insights_counts[@]}"; do
      [[ ${local_insights_counts[$rt]} -gt 0 ]] && \
        echo "INSIGHTS:$rt:${local_insights_counts[$rt]}"
    done
    for rt in "${!local_segmentation_counts[@]}"; do
      [[ ${local_segmentation_counts[$rt]} -gt 0 ]] && \
        echo "SEGMENTATION:$rt:${local_segmentation_counts[$rt]}"
    done
    echo "GLOBAL_END"
  } >> "$out"
}

# Process single account
count_resources_for_account() {
  local account_id="$1"
  local output_file="$2"
  
  set_context "$account_id" ""
  progress "Scanning account: $account_id"
  
  # Assume role if needed
  current_account=$(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo "")
  if [[ "$current_account" != "$account_id" ]]; then
    log "Assuming role $ROLE_NAME in account $account_id"
    
    local error_output=$(mktemp)
    
    # Build assume-role command based on whether external ID is provided
    local assume_cmd="aws sts assume-role --role-arn \"arn:aws:iam::${account_id}:role/${ROLE_NAME}\" --role-session-name \"illumio-counter\" --output json"
    
    if [[ -n "$EXTERNAL_ID" ]]; then
      assume_cmd="$assume_cmd --external-id \"$EXTERNAL_ID\""
    fi
    
    if ! ASSUME_OUTPUT=$(eval "$assume_cmd" 2>"$error_output"); then
      warn "Cannot access account $account_id. CHECK YOUR ROLE AND EXTERNAL ID ARE CORRECT. Error: $(cat "$error_output")"
      rm -f "$error_output"
      return
    fi
    rm -f "$error_output"
    
    export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' <<< "$ASSUME_OUTPUT")
    export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' <<< "$ASSUME_OUTPUT")
    export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' <<< "$ASSUME_OUTPUT")
  fi
  
  # Get regions
  local regions=$(get_all_regions)
  local temp_file="${output_file}_regions"
  > "$temp_file"
  
  # Process global resources
  count_global_resources "$account_id" "$temp_file" &
  local global_pid=$!
  
  # Process each region with controlled concurrency
  local region_pids=()
  while IFS= read -r region; do
    while [[ $(jobs -r -p | wc -l) -ge $CONCURRENCY_REGIONS ]]; do
      sleep 1
    done
    count_resources_for_region "$region" "$account_id" "$temp_file" &
    region_pids+=($!)
  done <<< "$regions"
  
  # Wait for completion
  wait $global_pid 2>/dev/null || true
  for pid in "${region_pids[@]}"; do
    wait $pid 2>/dev/null || true
  done
  
  # Parse and aggregate results
  declare -A account_insights_totals
  declare -A account_segmentation_totals
  
  for rt in "${INSIGHTS_RESOURCE_TYPES[@]}"; do
    account_insights_totals["$rt"]=0
  done
  for rt in "${SEGMENTATION_RESOURCE_TYPES[@]}"; do
    account_segmentation_totals["$rt"]=0
  done
  
  # Parse the structured output
  while IFS=':' read -r type category count; do
    case "$type" in
      "INSIGHTS")
        if [[ "$count" =~ ^[0-9]+$ ]]; then
          account_insights_totals["$category"]=$((account_insights_totals["$category"] + count))
        fi
        ;;
      "SEGMENTATION")
        if [[ "$count" =~ ^[0-9]+$ ]]; then
          account_segmentation_totals["$category"]=$((account_segmentation_totals["$category"] + count))
        fi
        ;;
    esac
  done < "$temp_file"
  
  # Write account results
  {
    echo "ACCOUNT:$account_id"
    for rt in "${INSIGHTS_RESOURCE_TYPES[@]}"; do
      echo "I_${rt}:${account_insights_totals[$rt]}"
    done
    for rt in "${SEGMENTATION_RESOURCE_TYPES[@]}"; do
      echo "S_${rt}:${account_segmentation_totals[$rt]}"
    done
    echo "ACCOUNT_END:$account_id"
  } > "$output_file"
  
  success "Finished counting resources for $account_id"
  rm -f "$temp_file"
}

# Main concurrent processor
count_resources_concurrently() {
  local accounts_str="$1"
  local num_accounts=$(echo "$accounts_str" | grep -c "^[0-9]\{12\}$")
  [[ $num_accounts -eq 1 ]] && CONCURRENCY_REGIONS=15 || CONCURRENCY_REGIONS=5
  log "Using CONCURRENCY_REGIONS=$CONCURRENCY_REGIONS for $num_accounts account(s)"
  
  # Convert to array
  local accounts_array=()
  while IFS= read -r account; do
    [[ -n "$account" ]] && accounts_array+=("$account")
  done <<< "$accounts_str"
  
  temp_dir=$(mktemp -d)
  local pids=()
  local temp_files=()
  
  info "Scanning ${#accounts_array[@]} account(s)..."
  
  # Process each account
  for account in "${accounts_array[@]}"; do
    [[ "$account" =~ ^[0-9]{12}$ ]] || continue
    
    while [[ $(jobs -r -p | wc -l) -ge $CONCURRENCY_ACCOUNTS ]]; do
      sleep 1
    done
    
    local account_file="$temp_dir/account_${account}.txt"
    temp_files+=("$account_file")
    
    count_resources_for_account "$account" "$account_file" &
    pids+=($!)
  done
  
  # Wait for all accounts
  for pid in "${pids[@]}"; do
    wait $pid 2>/dev/null || true
  done
  
  # Final aggregation
  for temp_file in "${temp_files[@]}"; do
    [[ -f "$temp_file" ]] || continue
    
    local in_account=false
    while IFS=':' read -r key value; do
      case "$key" in
        "ACCOUNT")
          in_account=true
          ;;
        "ACCOUNT_END")
          in_account=false
          ;;
        I_*)
          if $in_account && [[ "$value" =~ ^[0-9]+$ && $value -gt 0 ]]; then
            local category="${key#I_}"
            GLOBAL_INSIGHTS_COUNTS["$category"]=$((GLOBAL_INSIGHTS_COUNTS["$category"] + value))
          fi
          ;;
        S_*)
          if $in_account && [[ "$value" =~ ^[0-9]+$ && $value -gt 0 ]]; then
            local category="${key#S_}"
            GLOBAL_SEGMENTATION_COUNTS["$category"]=$((GLOBAL_SEGMENTATION_COUNTS["$category"] + value))
          fi
          ;;
      esac
    done < "$temp_file"
  done
}

calculate_workloads() {
  local total_iw=0 total_sw=0
  
  for rt in "${!GLOBAL_INSIGHTS_COUNTS[@]}"; do
    local count=${GLOBAL_INSIGHTS_COUNTS[$rt]:-0}
    local ratio=$(get_workload_ratio "$rt" iw)
    [[ $(echo "$ratio" | awk '{print ($1 > 0) ? 1 : 0}') -eq 1 ]] && \
      total_iw=$(echo "$total_iw $count $ratio" | awk '{print $1 + ($2 * $3)}')
  done
  
  for rt in "${!GLOBAL_SEGMENTATION_COUNTS[@]}"; do
    local count=${GLOBAL_SEGMENTATION_COUNTS[$rt]:-0}
    local ratio=$(get_workload_ratio "$rt" sw)
    [[ $(echo "$ratio" | awk '{print ($1 > 0) ? 1 : 0}') -eq 1 ]] && \
      total_sw=$(echo "$total_sw $count $ratio" | awk '{print $1 + ($2 * $3)}')
  done
  
  # Round up
  total_iw=$(echo "$total_iw" | awk '{print int($1+0.999)}')
  total_sw=$(echo "$total_sw" | awk '{print int($1+0.999)}')
  echo "$total_iw:$total_sw"
}

print_summary() {
  local scope="$1"
  local label=""
  
  # Format label based on scope
  if [[ "$scope" =~ ^org:(.+)$ ]]; then
    label="AWS Organization: ${BASH_REMATCH[1]}"
  elif [[ "$scope" =~ ^account:([0-9]{12})(,[0-9]{12})+$ ]]; then
    label="Custom Account Set"
  elif [[ "$scope" =~ ^account:([0-9]{12})$ ]]; then
    label="AWS Account: ${BASH_REMATCH[1]}"
  fi
  
  echo
  echo "╔══════════════════════════════════════════════════════════╗"
  echo -e "${BOLD} 📊 Resource Summary for $label${RESET}"
  echo "╚══════════════════════════════════════════════════════════╝"
  echo
  
  # Insights Workloads
  echo -e "${BOLD}${BLUE} 🔍 Illumio Insights Workloads (IWL)${RESET}"
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s %-10s${RESET}\n" "Resource Type" "Count" "IWL"
  echo "────────────────────────────────────────────────────────────────"
  
  local total_insights_resources=0
  for rt in "${INSIGHTS_RESOURCE_TYPES[@]}"; do
    local count=${GLOBAL_INSIGHTS_COUNTS[$rt]:-0}
    total_insights_resources=$((total_insights_resources + count))
    
    local ratio=$(get_workload_ratio "$rt" iw)
    local workload=0
    [[ $(echo "$ratio" | awk '{print ($1 > 0) ? 1 : 0}' 2>/dev/null) -eq 1 ]] && \
      workload=$(echo "$count $ratio" | awk '{printf "%.2f", $1 * $2}')
    
    if [[ $count -gt 0 ]]; then
      printf "%-40s %-10d %-10s\n" "$rt" "$count" "$workload"
    fi
  done
  
  local workloads=$(calculate_workloads)
  IFS=':' read -r total_iw total_sw <<< "$workloads"
  
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s ${GREEN}%-10s${RESET}\n" "TOTAL" "$total_insights_resources" "$total_iw IWLs"
  echo
  
  # Segmentation Workloads  
  local total_seg_resources=0
  for rt in "${SEGMENTATION_RESOURCE_TYPES[@]}"; do
    total_seg_resources=$((total_seg_resources + ${GLOBAL_SEGMENTATION_COUNTS[$rt]:-0}))
  done
  
  if [[ $total_seg_resources -gt 0 ]]; then
    echo -e "${BOLD}${BLUE} 🔐 Illumio Segmentation Workloads (SWL)${RESET}"
    echo "────────────────────────────────────────────────────────────────"
    printf "${BOLD}%-40s %-10s %-10s${RESET}\n" "Resource Type" "Count" "SWL"
    echo "────────────────────────────────────────────────────────────────"
    
    for rt in "${SEGMENTATION_RESOURCE_TYPES[@]}"; do
      local count=${GLOBAL_SEGMENTATION_COUNTS[$rt]:-0}
      [[ $count -eq 0 ]] && continue
      
      local ratio=$(get_workload_ratio "$rt" sw)
      local workload=0
      [[ $(echo "$ratio" | awk '{print ($1 > 0) ? 1 : 0}' 2>/dev/null) -eq 1 ]] && \
        workload=$(echo "$count $ratio" | awk '{printf "%.2f", $1 * $2}')
      
      printf "%-40s %-10d %-10s\n" "$rt" "$count" "$workload"
    done
    
    echo "────────────────────────────────────────────────────────────────"
    printf "${BOLD}%-40s %-10s ${GREEN}%-10s${RESET}\n" "TOTAL" "$total_seg_resources" "$total_sw SWLs"
  fi 
}

# Get accounts from organization
get_accounts_from_org() {
  local org_id="$1"
  log "Fetching accounts from organization..."
  aws organizations list-accounts --query 'Accounts[?Status==`ACTIVE`].Id' --output text 2>/dev/null | tr '\t' '\n'
}

# Print help
print_help() {
  printf "%s\n" \
    "${BOLD}$SCRIPT_NAME${RESET}" \
    "" \
    "${BOLD}USAGE:${RESET}" \
    "  $0 --scope <scope> --role <role> [options]" \
    "" \
    "${BOLD}REQUIRED:${RESET}" \
    "  --scope <scope>    Specify the AWS scope to scan:" \
    "                     • account:<ACCOUNT_ID>          - Single account ID" \
    "                     • account:<A1,A2,...,A11,...>   - Comma-separated account IDs" \
    "                     • org:<ORG_ID>                  - All accounts in organization" \
    "" \
    "  --role <name>      Cross-account role name" \
    "" \
    "${BOLD}OPTIONS:${RESET}" \
    "  --external-id <id> External ID for custom roles (required for if role is not 'OrganizationAccountAccessRole')" \
    "  --verbose          Enable detailed logging" \
    "  --help             Show this help message" \
    "" \
    "${BOLD}EXAMPLES:${RESET}" \
    "  # Using OrganizationAccountAccessRole" \
    "  $0 --scope org:123456789012 \\" \
    "     --role OrganizationAccountAccessRole" \
    "" \
    "  # Using StackSet-deployed custom role with external ID" \
    "  $0 --scope org:123456789012 \\" \
    "     --role IllumioResourceCounterRole \\" \
    "     --external-id my-secure-external-id" \
    "" \
    "  # Using StackSet-deployed custom role with external ID for a single account" \
    "  $0 --scope account:123456789012 \\" \
    "     --role IllumioResourceCounterRole \\" \
    "     --external-id my-secure-external-id" \
    "" \
    "  # Scanning a custom set of accounts (comma-separated list via account:)" \
    "  $0 --scope account:111111111111,222222222222,333333333333 \\" \
    "     --role OrganizationAccountAccessRole" \
    "" \
    "${BOLD}PREREQUISITES:${RESET}" \
    "  • AWS CLI installed and authenticated" \
    "  • jq utilities installed" \
    "  • Appropriate IAM permissions" \
    "" \
    "${BOLD}NOTES:${RESET}" \
    "  • The script scans all regions for regional resources" \
    "  • Accounts without proper role access will be skipped with warnings"
}

# ------------------------
# Main Function
# ------------------------
main() {
  local scope=""
  local role_name=""
  local external_id=""
  local help=false
  local verbose=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --scope)
        scope="$2"
        shift 2
        ;;
      --role)
        role_name="$2"
        shift 2
        ;;
      --external-id)
        external_id="$2"
        shift 2
        ;;
      --verbose)
        verbose=true
        shift
        ;;
      --help)
        help=true
        shift
        ;;
      *)
        error_exit "Unknown option: $1" \
        "Run '$0 --help' for usage information"
        ;;
    esac
  done
  
  if $help; then
    print_help
    exit 0
  fi
  
  VERBOSE=$verbose
  
  # Validate required parameters
  if [[ -z "$scope" ]]; then
    error_exit "Scope is required" \
    "Use --scope account:<ID> or --scope org:<ID>"
  fi
  
  if [[ -z "$role_name" ]]; then
    error_exit "Role name is required" \
    "Use --role OrganizationAccountAccessRole (default) or --role YourCustomRole"
  fi
  
  if ! [[ "$scope" =~ ^(account|org):(.+)$ ]]; then
    error_exit "Invalid scope format: $scope" \
    "Use format: account:<ID> or account:<ID1,ID2,...> | org:<ID>"
  fi
  
  # Set role configuration based on role name
  ROLE_NAME="$role_name"
  
  if [[ "$ROLE_NAME" == "$DEFAULT_ROLE" ]]; then
    # Using default AWS Organizations role - no external ID needed/allowed
    if [[ -n "$external_id" ]]; then
      warn "External ID not used with OrganizationAccountAccessRole (AWS default)"
    fi
    EXTERNAL_ID=""
    info "Using AWS Organizations default role: $DEFAULT_ROLE"
  else
    # Using custom role - external ID required
    if [[ -z "$external_id" ]]; then
      error_exit "External ID is required for custom role '$ROLE_NAME'" \
      "Provide --external-id your-external-id for security when using custom roles"
    fi
    EXTERNAL_ID="$external_id"
    info "Using custom role: $ROLE_NAME with external ID"
  fi
  
  info "Starting $SCRIPT_NAME"
  
  # Check prerequisites
  check_prerequisites
  
  # Load resource mappings
  load_resource_mapping
  
  # Initialize mappings
  initialize_mappings
  
  # Get accounts based on scope
  local accounts=""
  if [[ "$scope" =~ ^account:([0-9]{12})$ ]]; then
    accounts="${BASH_REMATCH[1]}"
    info "Scanning single account: ${BASH_REMATCH[1]}"
  elif [[ "$scope" =~ ^account:([0-9]{12})(,[0-9]{12})+$ ]]; then
    # Parse comma-separated list of account IDs after 'account:'
    raw_list="${scope#account:}"
    accounts=$(echo "$raw_list" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | grep -E '^[0-9]{12}$' || true)
    [[ -z "$accounts" ]] && error_exit "No valid 12-digit account IDs found in list" \
      "Provide --scope account:<A1,A2,...> where each account ID is 12 digits"
    info "Scanning custom account set: $accounts"
  elif [[ "$scope" =~ ^org:(.+)$ ]]; then
    progress "Fetching accounts from organization..."
    accounts=$(get_accounts_from_org "${BASH_REMATCH[1]}")
    [[ -z "$accounts" ]] && error_exit "No accounts found or no organization access" \
      "Ensure you have organizations:ListAccounts permission"
  else
    error_exit "Invalid scope format" \
    "Use --scope account:123456789012 or --scope account:123456789012,123456789013,... or --scope org:123456789012"
  fi
  
  # Convert to array
  mapfile -t accounts_array <<< "$accounts"
  info "Found ${#accounts_array[@]} account(s) to scan"
  
  # Process accounts
  progress "Scanning resources (this may take several minutes)..."
  count_resources_concurrently "$(printf "%s\n" "${accounts_array[@]}")"
  
  # Display results
  print_summary "$scope"
}

# Execute main function
main "$@"