#!/usr/bin/env bash

set -euo pipefail

# Trap Ctrl+C (SIGINT) and clean up
trap_ctrlc() {
  kill 0
  exit 130
}
trap trap_ctrlc SIGINT SIGTERM

SCRIPT_NAME="Azure Resource Counter for Illumio"

# ------------------------
# Configuration
# ------------------------
VERBOSE=false
SCOPE=""
CONCURRENCY=20

# ------------------------
# Resource Mapping Configuration
# ------------------------
RESOURCE_MAPPING_URL="https://cloudsecure-onboarding-templates.s3.us-west-2.amazonaws.com/cloudsecure/resources.json"
RESOURCE_MAPPING_JSON=""
MAPPING_VERSION=""
MAPPING_DATE=""
USING_FALLBACK=false

# Embedded fallback
FALLBACK_RESOURCE_MAPPING_BASE64=""

# ------------------------
# Color codes for output
# ------------------------
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[36m'
WHITE='\033[37m'
BOLD='\033[1m'
RESET='\033[0m'

# ------------------------
# Output Functions
# ------------------------
log() {
  if $VERBOSE; then
    echo -e "${WHITE}[LOG] $1${RESET}" >&2
  fi
}

log_api_call() {
  if $VERBOSE; then
    echo -e "${WHITE}[API CALL] $1${RESET}" >&2
  fi
}

log_failure() {
  if $VERBOSE; then
    echo -e "${RED}[API FAILURE] $1${RESET}" >&2
  fi
}

error_exit() {
  echo -e "${RED}✗ Error: $1${RESET}" >&2
  echo -e "${YELLOW}  Tip: $2${RESET}" >&2 2>/dev/null || true
  exit 1
}

warn() {
  echo -e "${YELLOW}⚠ Warning: $1${RESET}" >&2
}

info() {
  echo -e "${BLUE}ℹ $1${RESET}" >&2
}

success() {
  echo -e "${GREEN}✔ $1${RESET}" >&2
}

progress() {
  echo -e "${WHITE}⏳ $1${RESET}" >&2
}

# ------------------------
# Resource Mapping Functions
# ------------------------
decode_fallback_mapping() {
  if [[ -z "$FALLBACK_RESOURCE_MAPPING_BASE64" ]]; then
    error_exit "No embedded fallback resource mapping found" \
      "Please ensure the FALLBACK_RESOURCE_MAPPING_BASE64 variable is populated"
  fi
  echo "$FALLBACK_RESOURCE_MAPPING_BASE64" | base64 -d || {
    error_exit "Failed to decode embedded resource mappings" \
      "The embedded fallback may be corrupted"
  }
}

fetch_remote_mapping() {
  local temp_file=$(mktemp)
  local error_file=$(mktemp)
  local success=false
  
  # Try to fetch with curl (primary method)
  if command -v curl >/dev/null 2>&1; then
    log "Fetching resource mappings via curl..."
    if curl -sS --connect-timeout 5 --max-time 10 \
         "$RESOURCE_MAPPING_URL" \
         -o "$temp_file" 2>"$error_file"; then
      if [[ -s "$temp_file" ]] && jq -e '.clouds' "$temp_file" >/dev/null 2>&1; then
        cat "$temp_file"
        success=true
      else
        log "Downloaded file is invalid or empty"
      fi
    else
      log "Curl failed: $(cat "$error_file")"
    fi
  # Fallback to wget if curl not available
  elif command -v wget >/dev/null 2>&1; then
    log "Fetching resource mappings via wget..."
    if wget -q --timeout=10 -O "$temp_file" \
         "$RESOURCE_MAPPING_URL" 2>"$error_file"; then
      if [[ -s "$temp_file" ]] && jq -e '.clouds' "$temp_file" >/dev/null 2>&1; then
        cat "$temp_file"
        success=true
      else
        log "Downloaded file is invalid or empty"
      fi
    else
      log "Wget failed: $(cat "$error_file")"
    fi
  else
    log "Neither curl nor wget available for fetching remote mappings"
  fi
  
  rm -f "$temp_file" "$error_file"
  
  if $success; then
    return 0
  else
    return 1
  fi
}

load_resource_mapping() {
  local temp_mapping_file=$(mktemp)
  
  # Try to fetch remote mapping
  log "Attempting to fetch latest resource mappings from remote source..."
  if fetch_remote_mapping > "$temp_mapping_file" 2>/dev/null; then
    RESOURCE_MAPPING_JSON="$temp_mapping_file"
    USING_FALLBACK=false
    log "Successfully fetched latest resource mappings"
  else
    # Use fallback
    log "Remote mappings unavailable, using embedded fallback"
    decode_fallback_mapping > "$temp_mapping_file"
    RESOURCE_MAPPING_JSON="$temp_mapping_file"
    USING_FALLBACK=true
    
    if ! $VERBOSE; then
      warn "Using fallback resource mappings (remote source unavailable)"
    fi
  fi
  
  # Validate JSON structure
  if ! jq -e '.clouds.azure' "$RESOURCE_MAPPING_JSON" >/dev/null 2>&1; then
    error_exit "Invalid JSON structure in resource mappings" \
      "The resource mapping file is corrupted or has an unexpected format"
  fi
  
  # Extract version and date
  MAPPING_VERSION=$(jq -r '.version // "unknown"' "$RESOURCE_MAPPING_JSON" 2>/dev/null)
  MAPPING_DATE=$(jq -r '.updatedDate // "unknown"' "$RESOURCE_MAPPING_JSON" 2>/dev/null)
  
  # Display mapping info
  local mapping_source=$($USING_FALLBACK && echo "embedded" || echo "latest")
  info "Resource mappings loaded (${mapping_source} - v${MAPPING_VERSION}, updated: ${MAPPING_DATE})"
}

cleanup_mapping() {
  if [[ -n "$RESOURCE_MAPPING_JSON" && -f "$RESOURCE_MAPPING_JSON" ]]; then
    rm -f "$RESOURCE_MAPPING_JSON"
  fi
}

# ------------------------
# Cleanup on exit
# ------------------------
cleanup() {
  cleanup_mapping
}
trap cleanup EXIT ERR INT TERM

# ------------------------
# Prerequisites Check
# ------------------------
check_prerequisites() {
  local scope="$1"
  
  # Check required tools
  command -v az >/dev/null 2>&1 || \
    error_exit "Azure CLI is not installed" \
    "Install it from: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
  
  command -v jq >/dev/null 2>&1 || \
    error_exit "jq is not installed" \
    "Install with: brew install jq (Mac) or apt-get install jq (Linux)"
  
  # Check authentication
  if ! az account show >/dev/null 2>&1; then
    error_exit "Not authenticated to Azure" \
    "Run: az login"
  fi
  
  # Resource mapping validation is now handled by load_resource_mapping
  
  success "Prerequisites verified"
  
  # Check specific scope access
  if [[ "$scope" =~ ^subscription:(.+)$ ]]; then
    local subscription_id="${BASH_REMATCH[1]}"
    info "Verifying access to subscription: $subscription_id"
    if ! az account show --subscription "$subscription_id" >/dev/null 2>&1; then
      error_exit "Unable to access subscription: $subscription_id" \
      "Check if the subscription exists and you have the required permissions"
    fi
    success "Subscription access verified"
  elif [[ "$scope" =~ ^tenant:(.+)$ ]]; then
    info "Verifying tenant access"
    if ! az account list --query "[].id" >/dev/null 2>&1; then
      error_exit "Unable to list subscriptions in tenant" \
      "Ensure you have Reader role at the tenant root level"
    fi
    success "Tenant access verified"
  fi
}

# ------------------------
# Initialize Resource Mappings
# ------------------------
initialize_mappings() {
  log "Initializing resource mappings..."
  
  # Build resource types arrays
  AZURE_RESOURCE_TYPES=($(jq -r '.clouds.azure[] | .script_resource_name' "$RESOURCE_MAPPING_JSON"))
  
  # Build workload ratios
  WORKLOAD_RATIOS_DATA=$(jq -r '.clouds.azure[] | .resource_type + ":" + (.ratio_iwl | tostring) + ":" + (.ratio_swl | tostring)' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  
  # Build resource mapping
  RESOURCE_MAPPING=($(build_resource_mapping | cut -d' ' -f1))
  
  # Build Illumio categories
  INSIGHTS_RESOURCE_TYPES=()
  while IFS= read -r type; do
    INSIGHTS_RESOURCE_TYPES+=("$type")
  done < <(jq -r '.clouds.azure[] | select(.enabled_insights == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)

  SEGMENTATION_RESOURCE_TYPES=()
  while IFS= read -r type; do
    SEGMENTATION_RESOURCE_TYPES+=("$type")
  done < <(jq -r '.clouds.azure[] | select(.enabled_segmentation == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  
  # Initialize aggregate counts
  INSIGHTS_COUNTS_AGGREGATE=()
  SEGMENTATION_COUNTS_AGGREGATE=()
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
    INSIGHTS_COUNTS_AGGREGATE[$i]=0
  done
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
    SEGMENTATION_COUNTS_AGGREGATE[$i]=0
  done
}

build_resource_mapping() {
  local mapping=""
  
  # Use parallel arrays instead of associative arrays
  local iwl_categories=()
  local iwl_indices=()
  local swl_categories=()
  local swl_indices=()
  
  # Build index arrays
  local iwl_cats=$(jq -r '.clouds.azure[] | select(.enabled_insights == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  local swl_cats=$(jq -r '.clouds.azure[] | select(.enabled_segmentation == true) | .resource_type' "$RESOURCE_MAPPING_JSON" | sort | uniq)
  
  local i=0
  while IFS= read -r cat; do
    if [[ -n "$cat" ]]; then
      iwl_categories+=("$cat")
      iwl_indices+=($i)
      ((i++))
    fi
  done <<< "$iwl_cats"
  
  i=0
  while IFS= read -r cat; do
    if [[ -n "$cat" ]]; then
      swl_categories+=("$cat")
      swl_indices+=($i)
      ((i++))
    fi
  done <<< "$swl_cats"
  
  # Build mapping array using parallel array lookup
  local resources=$(jq -r '.clouds.azure[] | .script_resource_name + "|" + .resource_type' "$RESOURCE_MAPPING_JSON")
  while IFS='|' read -r type cat; do
    local iwl_idx=-1
    local swl_idx=-1
    
    # Find index in iwl arrays
    for j in "${!iwl_categories[@]}"; do
      if [[ "${iwl_categories[$j]}" == "$cat" ]]; then
        iwl_idx=${iwl_indices[$j]}
        break
      fi
    done
    
    # Find index in swl arrays
    for j in "${!swl_categories[@]}"; do
      if [[ "${swl_categories[$j]}" == "$cat" ]]; then
        swl_idx=${swl_indices[$j]}
        break
      fi
    done
    
    mapping="$mapping$type|$iwl_idx|$swl_idx\n"
  done <<< "$resources"
  
  echo -e "$mapping"
}

# ------------------------
# Core Functions
# ------------------------
get_workload_ratio() {
  local resource_type="$1"
  local ratio_type="$2"
  local ratio_line=$(grep -E "^${resource_type}:" <<< "$WORKLOAD_RATIOS_DATA" || echo "Other:0.01:0.01")
  if [[ "$ratio_type" == "iw" ]]; then
    cut -d':' -f2 <<< "$ratio_line"
  else
    cut -d':' -f3 <<< "$ratio_line"
  fi
}

# Cross-platform file locking
lock_file() {
  local file="$1"
  local timeout="${2:-30}"
  local lock_file="${file}.lock"
  local count=0
  
  while [ $count -lt $timeout ]; do
    if mkdir "$lock_file" 2>/dev/null; then
      return 0
    fi
    sleep 0.1
    count=$((count + 1))
  done
  return 1
}

unlock_file() {
  local file="$1"
  rmdir "${file}.lock" 2>/dev/null || true
}

resolve_scope_to_subscriptions() {
  local scope="$1"
  local ids
  
  if [[ "$scope" =~ ^subscription:(.+)$ ]]; then
    echo "${BASH_REMATCH[1]}"
  elif [[ "$scope" =~ ^tenant:(.+)$ ]]; then
    log "Fetching subscriptions from tenant"
    local error_output=$(mktemp)
    local temp_output=$(mktemp)
    
    log_api_call "Executing: az account list --query [].id"
    az account list --query "[].id" --output tsv 2> "$error_output" > "$temp_output"
    
    if [[ -s "$error_output" ]]; then
      log_failure "Failed to list subscriptions: $(cat "$error_output")"
    fi
    
    ids=$(cat "$temp_output" | grep -E '^[a-f0-9-]{36}$')
    rm -f "$error_output" "$temp_output"
    
    [[ -n "$ids" ]] || error_exit "No subscriptions found in tenant" \
      "Ensure you have at least Reader role on subscriptions"
    
    echo "$ids" | tr '\n' ' '
  else
    error_exit "Invalid scope format: $scope" \
      "Use subscription:<ID> or tenant:<ID>"
  fi
}

count_resources_for_subscription() {
  local subscription="$1"
  local temp_file="$2"
  
  declare -a insights_counts
  declare -a segmentation_counts
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do insights_counts[$i]=0; done
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do segmentation_counts[$i]=0; done
  
  log "Counting resources in subscription: $subscription"
  
  local tmp=$(mktemp)
  local error_output=$(mktemp)
  
  log_api_call "Executing: az resource list --subscription $subscription --query [].type"
  if ! az resource list \
      --subscription "$subscription" \
      --query "[].type" \
      --output tsv > "$tmp" 2> "$error_output"; then
    
    local error_msg=$(cat "$error_output")
    log_failure "Failed to list resources in subscription $subscription: $error_msg"
    if [[ "$error_msg" =~ "AuthorizationFailed" ]] || [[ "$error_msg" =~ "Forbidden" ]]; then
      warn "Skipping subscription $subscription: Insufficient permissions (need Reader role)"
    else
      warn "Failed to list resources in subscription $subscription"
    fi
    
    # Write zeros for this subscription
    if lock_file "$temp_file"; then
      echo -n "$subscription" >> "$temp_file"
      for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do echo -n ":0" >> "$temp_file"; done
      for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do echo -n ":0" >> "$temp_file"; done
      echo >> "$temp_file"
      unlock_file "$temp_file"
    fi
    
    rm -f "$tmp" "$error_output"
    return
  fi
  
  rm -f "$error_output"
  
  # Process resources
  local line_count=$(wc -l < "$tmp")
  if [[ $line_count -gt 0 ]]; then
    while IFS= read -r resource_type; do
      resource_type=$(echo "$resource_type" | tr -d '[:space:]')
      
      if [[ -n "$resource_type" ]]; then
        for mapping in "${RESOURCE_MAPPING[@]}"; do
          IFS='|' read -r azure_type iw_index sw_index <<< "$mapping"
          if [[ "$resource_type" == "$azure_type" ]]; then
            [[ $iw_index -ge 0 ]] && insights_counts[$iw_index]=$((insights_counts[$iw_index]+1))
            [[ $sw_index -ge 0 ]] && segmentation_counts[$sw_index]=$((segmentation_counts[$sw_index]+1))
            break
          fi
        done
      fi
    done < "$tmp"
  fi
  
  rm -f "$tmp"
  
  # Write results
  if lock_file "$temp_file"; then
    echo -n "$subscription" >> "$temp_file"
    for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
      echo -n ":${insights_counts[$i]}" >> "$temp_file"
    done
    for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
      echo -n ":${segmentation_counts[$i]}" >> "$temp_file"
    done
    echo >> "$temp_file"
    unlock_file "$temp_file"
  fi
  
  success "Finished counting resources for $subscription"
}

count_resources_concurrently() {
  local subscriptions_str="$1"
  IFS=' ' read -r -a subscriptions <<< "$subscriptions_str"
  
  local dir=$(mktemp -d)
  local out="$dir/counts.txt"
  local pids=()
  
  info "Scanning ${#subscriptions[@]} subscription(s)..."
  
  for s in "${subscriptions[@]}"; do
    if [[ -n "$s" && "$s" =~ ^[a-f0-9-]{36}$ ]]; then
      # Manage concurrency
      while [ "${#pids[@]}" -ge "$CONCURRENCY" ]; do
        new_pids=()
        for pid in "${pids[@]}"; do
          if kill -0 "$pid" 2>/dev/null; then
            new_pids+=("$pid")
          fi
        done
        pids=("${new_pids[@]}")
        sleep 0.1
      done
      
      count_resources_for_subscription "$s" "$out" &
      pids+=("$!")
    fi
  done
  
  # Wait for all jobs
  for pid in "${pids[@]}"; do 
    wait "$pid" 2>/dev/null || true
  done
  
  # Clean up locks
  rm -rf "$out".lock
  
  # Aggregate results
  if [[ -f "$out" ]]; then
    while IFS=':' read -r sub rest; do
      if [[ -n "$sub" && -n "$rest" ]]; then
        IFS=':' read -r -a vals <<< "$rest"
        local val_index=0
        
        for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
          if [[ $val_index -lt ${#vals[@]} && ${vals[$val_index]} =~ ^[0-9]+$ ]]; then
            INSIGHTS_COUNTS_AGGREGATE[$i]=$((INSIGHTS_COUNTS_AGGREGATE[$i] + vals[val_index]))
          fi
          val_index=$((val_index + 1))
        done
        
        for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
          if [[ $val_index -lt ${#vals[@]} && ${vals[$val_index]} =~ ^[0-9]+$ ]]; then
            SEGMENTATION_COUNTS_AGGREGATE[$i]=$((SEGMENTATION_COUNTS_AGGREGATE[$i] + vals[val_index]))
          fi
          val_index=$((val_index + 1))
        done
      fi
    done < "$out"
  fi
  
  rm -rf "$dir"
}

calculate_workloads() {
  local total_iw=0 total_sw=0
  
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
    local ct=${INSIGHTS_COUNTS_AGGREGATE[$i]}
    local rt=${INSIGHTS_RESOURCE_TYPES[$i]}
    local iw=$(get_workload_ratio "$rt" iw)
    iw=$(echo "$iw" | tr -d '[:space:]')
    
    if [[ -n "$iw" && "$iw" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$iw" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        total_iw=$(awk -v total="$total_iw" -v ct="$ct" -v iw="$iw" 'BEGIN {print total + ct * iw}')
      fi
    fi
  done
  
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
    local ct=${SEGMENTATION_COUNTS_AGGREGATE[$i]}
    local rt=${SEGMENTATION_RESOURCE_TYPES[$i]}
    local sw=$(get_workload_ratio "$rt" sw)
    sw=$(echo "$sw" | tr -d '[:space:]')
    
    if [[ -n "$sw" && "$sw" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$sw" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        total_sw=$(awk -v total="$total_sw" -v ct="$ct" -v sw="$sw" 'BEGIN {print total + ct * sw}')
      fi
    fi
  done
  
  # Round up
  total_iw=$(echo "$total_iw" | awk '{print int($1+0.999)}')
  total_sw=$(echo "$total_sw" | awk '{print int($1+0.999)}')
  echo "$total_iw:$total_sw"
}

print_summary() {
  local scope="$1"
  local label=""
  
  # Format label based on scope
  if [[ "$scope" =~ ^tenant:(.+)$ ]]; then
    label="Azure Tenant: ${BASH_REMATCH[1]}"
  elif [[ "$scope" =~ ^subscription:(.+)$ ]]; then
    label="Azure Subscription: ${BASH_REMATCH[1]}"
  fi
  
  echo
  echo "╔═══════════════════════════════════════════════════════════╗"
  echo -e "${BOLD} 📊 Resource Summary for $label${RESET}"
  echo "╚═══════════════════════════════════════════════════════════╝"
  echo
  
  # Insights Workloads
  echo -e "${BOLD}${BLUE} 🔍 Illumio Insights Workloads (IWL)${RESET}"
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s %-10s${RESET}\n" "Resource Type" "Count" "IWL"
  echo "────────────────────────────────────────────────────────────────"
  
  local total_insights_resources=0
  for i in "${!INSIGHTS_RESOURCE_TYPES[@]}"; do
    local rt=${INSIGHTS_RESOURCE_TYPES[$i]}
    local count=${INSIGHTS_COUNTS_AGGREGATE[$i]}
    local ratio=$(get_workload_ratio "$rt" iw)
    local workload=0
    
    total_insights_resources=$((total_insights_resources + count))
    
    ratio=$(echo "$ratio" | tr -d '[:space:]')
    if [[ -n "$ratio" && "$ratio" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$ratio" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        workload=$(awk -v count="$count" -v ratio="$ratio" 'BEGIN {printf "%.2f", count * ratio}')
      fi
    fi
    
    if [[ $count -gt 0 ]]; then
      printf "%-40s %-10s %-10s\n" "$rt" "$count" "$workload"
    fi
  done
  
  local w=$(calculate_workloads)
  IFS=':' read -r total_iw total_sw <<< "$w"
  
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s ${GREEN}%-10s${RESET}\n" "TOTAL" "$total_insights_resources" "$total_iw IWLs"
  echo
  
  # Segmentation Workloads
  echo -e "${BOLD}${BLUE} 🔐 Illumio Segmentation Workloads (SWL)${RESET}"
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s %-10s${RESET}\n" "Resource Type" "Count" "SWL"
  echo "────────────────────────────────────────────────────────────────"
  
  local total_segmentation_resources=0
  for i in "${!SEGMENTATION_RESOURCE_TYPES[@]}"; do
    local rt=${SEGMENTATION_RESOURCE_TYPES[$i]}
    local count=${SEGMENTATION_COUNTS_AGGREGATE[$i]}
    local ratio=$(get_workload_ratio "$rt" sw)
    local workload=0
    
    total_segmentation_resources=$((total_segmentation_resources + count))
    
    ratio=$(echo "$ratio" | tr -d '[:space:]')
    if [[ -n "$ratio" && "$ratio" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      if [[ $(awk -v val="$ratio" 'BEGIN {print (val > 0) ? 1 : 0}') -eq 1 ]]; then
        workload=$(awk -v count="$count" -v ratio="$ratio" 'BEGIN {printf "%.2f", count * ratio}')
      fi
    fi
    
    if [[ $count -gt 0 ]]; then
      printf "%-40s %-10s %-10s\n" "$rt" "$count" "$workload"
    fi
  done
  
  echo "────────────────────────────────────────────────────────────────"
  printf "${BOLD}%-40s %-10s ${GREEN}%-10s${RESET}\n" "TOTAL" "$total_segmentation_resources" "$total_sw SWLs"
}

print_help() {
  echo -e "${BOLD}$SCRIPT_NAME${RESET}

${BOLD}USAGE:${RESET}
  $0 --scope <scope> [options]

${BOLD}REQUIRED:${RESET}
  --scope <scope>    Specify the Azure scope to scan:
                     • subscription:<SUBSCRIPTION_ID>  - Single subscription
                     • tenant:<TENANT_ID>              - All subscriptions in tenant

${BOLD}OPTIONS:${RESET}
  --verbose          Enable detailed logging
  --help             Show this help message

${BOLD}EXAMPLES:${RESET}
  # Scan a single subscription
  $0 --scope subscription:12345678-1234-1234-1234-123456789012

  # Scan all subscriptions in tenant
  $0 --scope tenant:default

  # Scan with verbose output
  $0 --scope tenant:default --verbose

${BOLD}PREREQUISITES:${RESET}
  • Azure CLI installed and authenticated (az login)
  • jq utility installed
  • Appropriate Azure RBAC permissions

${BOLD}REQUIRED PERMISSIONS:${RESET}
  • Reader role on target subscriptions
  • Microsoft.Resources/subscriptions/resources/read

${BOLD}NOTES:${RESET}
  • The script will skip subscriptions where you lack permissions
  • Resource counts are aggregated across all accessible subscriptions"
}

# ------------------------
# Main Function
# ------------------------
main() {
  local scope=""
  local help=false
  local verbose=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --scope)
        scope="$2"
        shift 2
        ;;
      --verbose)
        verbose=true
        shift
        ;;
      --help)
        help=true
        shift
        ;;
      *)
        error_exit "Unknown option: $1" \
        "Run '$0 --help' for usage information"
        ;;
    esac
  done
  
  if $help; then
    print_help
    exit 0
  fi
  
  VERBOSE=$verbose
  
  if [[ -z "$scope" ]]; then
    error_exit "Scope is required" \
    "Use --scope subscription:<ID> or tenant:<ID>"
  fi
  
  # Validate scope format
  if ! [[ "$scope" =~ ^(subscription|tenant):(.+)$ ]]; then
    error_exit "Invalid scope format: $scope" \
    "Use format: subscription:<ID> or tenant:<ID>"
  fi
  
  info "Starting $SCRIPT_NAME"
  
  # Check prerequisites
  check_prerequisites "$scope"
  
  # Load resource mappings (NEW - added before initialize_mappings)
  load_resource_mapping
  
  # Initialize mappings
  initialize_mappings
  
  # Resolve scope to subscriptions
  progress "Resolving scope to subscriptions..."
  local subscriptions=$(resolve_scope_to_subscriptions "$scope")
  if [[ -z "$subscriptions" ]]; then
    error_exit "No accessible subscriptions found in scope: $scope" \
    "Verify you have Reader role on at least one subscription"
  fi
  
  # Convert to array for counting
  IFS=' ' read -r -a subscriptions_array <<< "$subscriptions"
  info "Found ${#subscriptions_array[@]} subscription(s) to scan"
  
  # Count resources
  progress "Scanning resources (this may take a few minutes)..."
  count_resources_concurrently "$subscriptions"
  
  # Print summary
  print_summary "$scope"
}

# Execute main function
main "$@"